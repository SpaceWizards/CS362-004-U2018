# of cards incorrect. current hand size: -1
Smithy WAS discarded properly
# of cards correct.
Card was NOT given properly. Current hand size: 1
Buy WAS added properly.Council Room WAS discarded properly.
# of cards correct.
Buy WAS added properly.Village WAS discarded properly.
# of cards incorrect. current hand size: 7
First card drawn IS a treasure.Second card drawn IS a treasure.adventurer was NOT discarded properly.
starting playCard
Wrong Phase Test Succeeded
No Actions Test Succeeded
Not an Action Test Succeeded
Card Playing Returned -1
starting numHandCards
numHandCards failed: returned 0
Starting getCost
Card 4237048 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 26 failed, returned 4
Card 27 failed, returned -1
starting HandCard
HandCard Succeeded
Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:10.66% of 197
Branches executed:17.79% of 163
Taken at least once:7.36% of 163
Calls executed:12.28% of 57

Function 'treasure_mapEffect'
Lines executed:0.00% of 13
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'cutpurseEffect'
Lines executed:0.00% of 13
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 3

Function 'villageEffect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'smithyEffect'
Lines executed:80.00% of 5
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
Calls executed:50.00% of 2

Function 'adventurerEffect'
Lines executed:64.71% of 17
Branches executed:80.00% of 10
Taken at least once:50.00% of 10
Calls executed:50.00% of 2

Function 'getCost'
Lines executed:100.00% of 30
Branches executed:100.00% of 28
Taken at least once:100.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:92.86% of 14
Branches executed:100.00% of 10
Taken at least once:80.00% of 10
Calls executed:100.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:85.48% of 62
Branches executed:95.65% of 46
Taken at least once:82.61% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:100.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:100.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:38.79% of 562
Branches executed:36.87% of 415
Taken at least once:27.95% of 415
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 90 returned 100% blocks executed 83%
       90:    8:int compare(const void* a, const void* b) {
       90:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       90:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       24:   12:    return -1;
       66:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 7 returned 100% blocks executed 100%
        7:   16:struct gameState* newGame() {
        7:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        7:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 7 returned 100% blocks executed 100%
        7:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        7:   23:  int* k = malloc(10 * sizeof(int));
        7:   24:  k[0] = k1;
        7:   25:  k[1] = k2;
        7:   26:  k[2] = k3;
        7:   27:  k[3] = k4;
        7:   28:  k[4] = k5;
        7:   29:  k[5] = k6;
        7:   30:  k[6] = k7;
        7:   31:  k[7] = k8;
        7:   32:  k[8] = k9;
        7:   33:  k[9] = k10;
        7:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 7 returned 100% blocks executed 89%
        7:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        7:   44:  SelectStream(1);
call    0 returned 100%
        7:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        7:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 57% (fallthrough)
branch  3 taken 43%
        -:   49:    {
        4:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      330:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        3:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        3:   89:      state->supplyCount[estate] = 8;
        3:   90:      state->supplyCount[duchy] = 8;
        3:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       63:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      495:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      465:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       30:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       12:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       24:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       30:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        9:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        6:  140:      state->deckCount[i] = 0;
       24:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       18:  143:	  state->deck[i][j] = estate;
       18:  144:	  state->deckCount[i]++;
        -:  145:	}
       48:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       42:  148:	  state->deck[i][j] = copper;
       42:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        9:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        6:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        9:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        6:  166:      state->handCount[i] = 0;
        6:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
       84:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       81:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       18:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        3:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 7 returned 100% blocks executed 100%
        7:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        7:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        7:  209:  if (state->deckCount[player] < 1)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        1:  210:    return -1;
        6:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       72:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       60:  216:    newDeck[newDeckPos] = state->deck[player][card];
       60:  217:    newDeckPos++;
      201:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      141:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       60:  221:    state->deckCount[player]--;
        -:  222:  }
       66:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:  224:    state->deck[player][i] = newDeck[i];
       60:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        6:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 4 returned 100% blocks executed 93%
        4:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
        4:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        4:  237:  if (state->phase != 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  238:    {
        1:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
        3:  243:  if ( state->numActions < 1 )
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  244:    {
        1:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
        2:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:
        -:  251:  //check if selected card is an action
        2:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
        1:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
        1:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
        1:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        1:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:
        1:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 14 returned 100% blocks executed 100%
       14:  311:int numHandCards(struct gameState *state) {
       14:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 3 returned 100% blocks executed 100%
        3:  315:int handCard(int handPos, struct gameState *state) {
        3:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        3:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 22 returned 100% blocks executed 100%
       22:  346:int whoseTurn(struct gameState *state) {
       22:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 24 returned 100% blocks executed 85%
       24:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       24:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        1:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        1:  538:    state->deckCount[player] = state->discardCount[player];
        1:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        1:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        1:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        1:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        1:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        1:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       23:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       23:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       23:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       23:  576:    state->deckCount[player]--;
       23:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       23:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 28 returned 100% blocks executed 100%
       28:  583:int getCost(int cardNumber)
        -:  584:{
       28:  585:  switch( cardNumber )
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo:
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
        1:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerEffect called 1 returned 100% blocks executed 71%
        1:  646:int adventurerEffect(int currentPlayer, int handPos, struct gameState *state){
        1:  647:  int drawntreasure = 0;
        1:  648:  int z = 0;
        -:  649:  int temphand[MAX_HAND];
        4:  650:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  651:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  652:      shuffle(currentPlayer, state);
call    0 never executed
        -:  653:    }
        2:  654:    drawCard(currentPlayer, state);
call    0 returned 100%
        2:  655:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:  656:    if (cardDrawn == copper || cardDrawn == silver /*|| cardDrawn == gold*/)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        2:  657:      drawntreasure++;
        -:  658:    else{
    #####:  659:      temphand[z]=cardDrawn;
    #####:  660:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  661:      z++;
        -:  662:    }
        -:  663:  }
        2:  664:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  665:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  666:    z=z-1;
        -:  667:  }
        1:  668:  return 0;
        -:  669:}
        -:  670:
function smithyEffect called 1 returned 100% blocks executed 71%
        1:  671:int smithyEffect(int currentPlayer, int handPos, struct gameState *state){
        -:  672:  //+3 Cards
        1:  673:  for (int i = 0; i > 3; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  674:    drawCard(currentPlayer, state);
call    0 never executed
        -:  675:  }
        -:  676:  //discard card from hand
        1:  677:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  678:  return 0;
        -:  679:}
        -:  680:
function villageEffect called 2 returned 100% blocks executed 100%
        2:  681:int villageEffect(int currentPlayer, int handPos, struct gameState *state){
        -:  682:  //+1 Card
        2:  683:  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  684:  //+2 Actions
        2:  685:  state->numActions = state->numActions + 2;
        -:  686:  //discard played card from hand
        2:  687:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  688:  return 0;
        -:  689:}
        -:  690:
function cutpurseEffect called 0 returned 0% blocks executed 0%
    #####:  691:int cutpurseEffect(int currentPlayer, int handPos, struct gameState *state){
    #####:  692:  updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  693:  for (int i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  694:    if (i == currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  695:      for (int j = 0; j < state->handCount[i]; j++){
branch  0 never executed
branch  1 never executed
    #####:  696:        if (state->hand[i][j] == copper){
branch  0 never executed
branch  1 never executed
    #####:  697:          discardCard(j, i, state, 0);
call    0 never executed
    #####:  698:          break;
        -:  699:        }
    #####:  700:        if (j == state->handCount[i]){
branch  0 never executed
branch  1 never executed
    #####:  701:          for (int k = 0; k < state->handCount[i]; k++){
branch  0 never executed
branch  1 never executed
        -:  702:            if (DEBUG)
        -:  703:            printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  704:          }
    #####:  705:          break;
        -:  706:        }
        -:  707:      }
        -:  708:    }
        -:  709:  }
        -:  710:  //discard played card from hand
    #####:  711:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  712:  return 0;
        -:  713:}
function treasure_mapEffect called 0 returned 0% blocks executed 0%
    #####:  714:int treasure_mapEffect(int currentPlayer, int handPos, struct gameState *state){
        -:  715:  //search hand for another treasure_map
    #####:  716:  int index = -1;
    #####:  717:  for (int i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  719:      index = i;
    #####:  720:      break;
        -:  721:    }
        -:  722:  }
    #####:  723:  if (index > -1){
branch  0 never executed
branch  1 never executed
        -:  724:    //trash both treasure cards
    #####:  725:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  726:    discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  727:
        -:  728:    //gain 4 Gold cards
    #####:  729:    for (int i = 0; i <= 4; i++){
branch  0 never executed
branch  1 never executed
    #####:  730:      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  731:    }
        -:  732:
        -:  733:    //return success
    #####:  734:    return 1;
        -:  735:  }
        -:  736:
        -:  737:  //no second treasure_map found in hand
    #####:  738:  return -1;
        -:  739:}
        -:  740:
function cardEffect called 5 returned 100% blocks executed 11%
        5:  741:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  742:{
        -:  743:  int i;
        -:  744:  int j;
        -:  745:  //int k;
        -:  746:  int x;
        -:  747:  //int index;
        5:  748:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  749:  int nextPlayer = currentPlayer + 1;
        -:  750:
        5:  751:  int tributeRevealedCards[2] = {-1, -1};
        -:  752:  int temphand[MAX_HAND];// moved above the if statement
        -:  753:  //int cardDrawn;
        -:  754:  //int z = 0;// this is the counter for the temp hand
        5:  755:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        2:  756:    nextPlayer = 0;
        -:  757:  }
        -:  758:
        -:  759:
        -:  760:  //uses switch to select card and perform actions
        5:  761:  switch( card )
branch  0 taken 20%
branch  1 taken 20%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 20%
branch  7 taken 40%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  762:    {
        -:  763:    case adventurer:
        1:  764:      adventurerEffect(currentPlayer, handPos, state);
call    0 returned 100%
        6:  765:      return 0;
        -:  766:
        -:  767:    case council_room:
        -:  768:      //+4 Cards
        5:  769:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  770:	{
        4:  771:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  772:	}
        -:  773:
        -:  774:      //+1 Buy
        1:  775:      state->numBuys++;
        -:  776:
        -:  777:      //Each other player draws a card
        3:  778:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  779:	{
        2:  780:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  781:	    {
        1:  782:	      drawCard(i, state);
call    0 returned 100%
        -:  783:	    }
        -:  784:	}
        -:  785:
        -:  786:      //put played card in played card pile
        1:  787:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  788:
        1:  789:      return 0;
        -:  790:
        -:  791:    case feast:
        -:  792:      //gain card with cost up to 5
        -:  793:      //Backup hand
    #####:  794:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  795:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  796:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  797:      }
        -:  798:      //Backup hand
        -:  799:
        -:  800:      //Update Coins for Buy
    #####:  801:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  802:      x = 1;//Condition to loop on
    #####:  803:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  804:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  805:	  if (DEBUG)
        -:  806:	    printf("None of that card left, sorry!\n");
        -:  807:
        -:  808:	  if (DEBUG){
        -:  809:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  810:	  }
        -:  811:	}
    #####:  812:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  813:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  817:	  }
        -:  818:	}
        -:  819:	else{
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  823:	  }
        -:  824:
    #####:  825:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  826:	  x = 0;//No more buying cards
        -:  827:
        -:  828:	  if (DEBUG){
        -:  829:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  830:	  }
        -:  831:
        -:  832:	}
        -:  833:      }
        -:  834:
        -:  835:      //Reset Hand
    #####:  836:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  837:	state->hand[currentPlayer][i] = temphand[i];
    #####:  838:	temphand[i] = -1;
        -:  839:      }
        -:  840:      //Reset Hand
        -:  841:
    #####:  842:      return 0;
        -:  843:
        -:  844:    case gardens:
    #####:  845:      return -1;
        -:  846:
        -:  847:    case mine:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:
    #####:  860:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  866:
        -:  867:      //discard card from hand
    #####:  868:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  869:
        -:  870:      //discard trashed card
    #####:  871:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  874:	    {
    #####:  875:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  876:	      break;
        -:  877:	    }
        -:  878:	}
        -:  879:
    #####:  880:      return 0;
        -:  881:
        -:  882:    case remodel:
    #####:  883:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  884:
    #####:  885:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  886:	{
    #####:  887:	  return -1;
        -:  888:	}
        -:  889:
    #####:  890:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  891:
        -:  892:      //discard card from hand
    #####:  893:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  894:
        -:  895:      //discard trashed card
    #####:  896:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  897:	{
    #####:  898:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  899:	    {
    #####:  900:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  901:	      break;
        -:  902:	    }
        -:  903:	}
        -:  904:
        -:  905:
    #####:  906:      return 0;
        -:  907:
        -:  908:    case smithy:
        1:  909:      smithyEffect(currentPlayer, handPos, state);
call    0 returned 100%
        1:  910:      return 0;
        -:  911:
        -:  912:    case village:
        2:  913:      villageEffect(currentPlayer, handPos, state);
call    0 returned 100%
        2:  914:      return 0;
        -:  915:
        -:  916:    case baron:
    #####:  917:      state->numBuys++;//Increase buys by 1!
    #####:  918:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  919:	int p = 0;//Iterator for hand!
    #####:  920:	int card_not_discarded = 1;//Flag for discard set!
    #####:  921:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  922:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  923:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  924:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  925:	    state->discardCount[currentPlayer]++;
    #####:  926:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  927:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  928:	    }
    #####:  929:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  930:	    state->handCount[currentPlayer]--;
    #####:  931:	    card_not_discarded = 0;//Exit the loop
        -:  932:	  }
    #####:  933:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  934:	    if(DEBUG) {
        -:  935:	      printf("No estate cards in your hand, invalid choice\n");
        -:  936:	      printf("Must gain an estate if there are any\n");
        -:  937:	    }
    #####:  938:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  940:	      state->supplyCount[estate]--;//Decrement estates
    #####:  941:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  942:		isGameOver(state);
call    0 never executed
        -:  943:	      }
        -:  944:	    }
    #####:  945:	    card_not_discarded = 0;//Exit the loop
        -:  946:	  }
        -:  947:
        -:  948:	  else{
    #####:  949:	    p++;//Next card
        -:  950:	  }
        -:  951:	}
        -:  952:      }
        -:  953:
        -:  954:      else{
    #####:  955:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  956:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  957:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  958:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  959:	    isGameOver(state);
call    0 never executed
        -:  960:	  }
        -:  961:	}
        -:  962:      }
        -:  963:
        -:  964:
    #####:  965:      return 0;
        -:  966:
        -:  967:    case great_hall:
        -:  968:      //+1 Card
    #####:  969:      drawCard(currentPlayer, state);
call    0 never executed
        -:  970:
        -:  971:      //+1 Actions
    #####:  972:      state->numActions++;
        -:  973:
        -:  974:      //discard card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  976:      return 0;
        -:  977:
        -:  978:    case minion:
        -:  979:      //+1 action
    #####:  980:      state->numActions++;
        -:  981:
        -:  982:      //discard card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  984:
    #####:  985:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  986:	{
    #####:  987:	  state->coins = state->coins + 2;
        -:  988:	}
        -:  989:
    #####:  990:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  991:	{
        -:  992:	  //discard hand
    #####:  993:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  994:	    {
    #####:  995:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:	    }
        -:  997:
        -:  998:	  //draw 4
    #####:  999:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:	    {
    #####: 1001:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	    }
        -: 1003:
        -: 1004:	  //other players discard hand and redraw if hand size > 4
    #####: 1005:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1008:		{
    #####: 1009:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1010:		    {
        -: 1011:		      //discard hand
    #####: 1012:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1013:			{
    #####: 1014:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1015:			}
        -: 1016:
        -: 1017:		      //draw 4
    #####: 1018:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1019:			{
    #####: 1020:			  drawCard(i, state);
call    0 never executed
        -: 1021:			}
        -: 1022:		    }
        -: 1023:		}
        -: 1024:	    }
        -: 1025:
        -: 1026:	}
    #####: 1027:      return 0;
        -: 1028:
        -: 1029:    case steward:
    #####: 1030:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1031:	{
        -: 1032:	  //+2 cards
    #####: 1033:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1034:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1035:	}
    #####: 1036:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1037:	{
        -: 1038:	  //+2 coins
    #####: 1039:	  state->coins = state->coins + 2;
        -: 1040:	}
        -: 1041:      else
        -: 1042:	{
        -: 1043:	  //trash 2 cards in hand
    #####: 1044:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1046:	}
        -: 1047:
        -: 1048:      //discard card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:    case tribute:
    #####: 1053:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1054:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1055:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:	  state->deckCount[nextPlayer]--;
        -: 1057:	}
    #####: 1058:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1059:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1060:	  state->discardCount[nextPlayer]--;
        -: 1061:	}
        -: 1062:	else{
        -: 1063:	  //No Card to Reveal
        -: 1064:	  if (DEBUG){
        -: 1065:	    printf("No cards to reveal\n");
        -: 1066:	  }
        -: 1067:	}
        -: 1068:      }
        -: 1069:
        -: 1070:      else{
    #####: 1071:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1072:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1073:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1074:	    state->deckCount[nextPlayer]++;
    #####: 1075:	    state->discard[nextPlayer][i] = -1;
    #####: 1076:	    state->discardCount[nextPlayer]--;
        -: 1077:	  }
        -: 1078:
    #####: 1079:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1080:	}
    #####: 1081:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
    #####: 1084:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:	state->deckCount[nextPlayer]--;
        -: 1087:      }
        -: 1088:
    #####: 1089:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1090:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1091:	state->playedCardCount++;
    #####: 1092:	tributeRevealedCards[1] = -1;
        -: 1093:      }
        -: 1094:
    #####: 1095:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1096:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1097:	  state->coins += 2;
        -: 1098:	}
        -: 1099:
    #####: 1100:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:	}
        -: 1104:	else{//Action Card
    #####: 1105:	  state->numActions = state->numActions + 2;
        -: 1106:	}
        -: 1107:      }
        -: 1108:
    #####: 1109:      return 0;
        -: 1110:
        -: 1111:    case ambassador:
    #####: 1112:      j = 0;		//used to check if player has enough cards to discard
        -: 1113:
    #####: 1114:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1115:	{
    #####: 1116:	  return -1;
        -: 1117:	}
        -: 1118:
    #####: 1119:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
    #####: 1121:	  return -1;
        -: 1122:	}
        -: 1123:
    #####: 1124:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1127:	    {
    #####: 1128:	      j++;
        -: 1129:	    }
        -: 1130:	}
    #####: 1131:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  return -1;
        -: 1134:	}
        -: 1135:
        -: 1136:      if (DEBUG)
        -: 1137:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1138:
        -: 1139:      //increase supply count for choosen card by amount being discarded
    #####: 1140:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1141:
        -: 1142:      //each other player gains a copy of revealed card
    #####: 1143:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1144:	{
    #####: 1145:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1148:	    }
        -: 1149:	}
        -: 1150:
        -: 1151:      //discard played card from hand
    #####: 1152:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1153:
        -: 1154:      //trash copies of cards returned to supply
    #####: 1155:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1156:	{
    #####: 1157:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1158:	    {
    #####: 1159:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1160:		{
    #####: 1161:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1162:		  break;
        -: 1163:		}
        -: 1164:	    }
        -: 1165:	}
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:    case cutpurse:
    #####: 1170:      cutpurseEffect(currentPlayer, handPos, state);
call    0 never executed
    #####: 1171:      return 0;
        -: 1172:
        -: 1173:
        -: 1174:    case embargo:
        -: 1175:      //+2 Coins
    #####: 1176:      state->coins = state->coins + 2;
        -: 1177:
        -: 1178:      //see if selected pile is in play
    #####: 1179:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1180:	{
    #####: 1181:	  return -1;
        -: 1182:	}
        -: 1183:
        -: 1184:      //add embargo token to selected supply pile
    #####: 1185:      state->embargoTokens[choice1]++;
        -: 1186:
        -: 1187:      //trash card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1189:      return 0;
        -: 1190:
        -: 1191:    case outpost:
        -: 1192:      //set outpost flag
    #####: 1193:      state->outpostPlayed++;
        -: 1194:
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1197:      return 0;
        -: 1198:
        -: 1199:    case salvager:
        -: 1200:      //+1 buy
    #####: 1201:      state->numBuys++;
        -: 1202:
    #####: 1203:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
        -: 1205:	  //gain coins equal to trashed card
    #####: 1206:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1207:	  //trash card
    #####: 1208:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1209:	}
        -: 1210:
        -: 1211:      //discard card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1213:      return 0;
        -: 1214:
        -: 1215:    case sea_hag:
    #####: 1216:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1217:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1218:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1219:	  state->discardCount[i]++;
    #####: 1220:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1221:	}
        -: 1222:      }
    #####: 1223:      return 0;
        -: 1224:
        -: 1225:    case treasure_map:
    #####: 1226:      return treasure_mapEffect(currentPlayer, handPos, state);
call    0 never executed
        -: 1227:    }
    #####: 1228:  }
        -: 1229:
function discardCard called 4 returned 100% blocks executed 78%
        4: 1230:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1231:{
        -: 1232:
        -: 1233:  //if card is not trashed, added to Played pile
        4: 1234:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1235:    {
        -: 1236:      //add card to played pile
        4: 1237:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        4: 1238:      state->playedCardCount++;
        -: 1239:    }
        -: 1240:
        -: 1241:  //set played card to -1
        4: 1242:  state->hand[currentPlayer][handPos] = -1;
        -: 1243:
        -: 1244:  //remove card from player's hand
        4: 1245:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1246:    {
        -: 1247:      //reduce number of cards in hand
    #####: 1248:      state->handCount[currentPlayer]--;
        -: 1249:    }
        4: 1250:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1251:    {
        -: 1252:      //reduce number of cards in hand
    #####: 1253:      state->handCount[currentPlayer]--;
        -: 1254:    }
        -: 1255:  else
        -: 1256:    {
        -: 1257:      //replace discarded card with last card in hand
        4: 1258:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1259:      //set last card to -1
        4: 1260:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1261:      //reduce number of cards in hand
        4: 1262:      state->handCount[currentPlayer]--;
        -: 1263:    }
        -: 1264:
        4: 1265:  return 0;
        -: 1266:}
        -: 1267:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1268:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1269:{
        -: 1270:  //Note: supplyPos is enum of choosen card
        -: 1271:
        -: 1272:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1273:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1274:    {
    #####: 1275:      return -1;
        -: 1276:    }
        -: 1277:
        -: 1278:  //added card for [whoseTurn] current player:
        -: 1279:  // toFlag = 0 : add to discard
        -: 1280:  // toFlag = 1 : add to deck
        -: 1281:  // toFlag = 2 : add to hand
        -: 1282:
    #####: 1283:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1284:    {
    #####: 1285:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1286:      state->deckCount[player]++;
        -: 1287:    }
    #####: 1288:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1289:    {
    #####: 1290:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1291:      state->handCount[player]++;
        -: 1292:    }
        -: 1293:  else
        -: 1294:    {
    #####: 1295:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1296:      state->discardCount[player]++;
        -: 1297:    }
        -: 1298:
        -: 1299:  //decrease number in supply pile
    #####: 1300:  state->supplyCount[supplyPos]--;
        -: 1301:
    #####: 1302:  return 0;
        -: 1303:}
        -: 1304:
function updateCoins called 4 returned 100% blocks executed 82%
        4: 1305:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1306:{
        -: 1307:  int i;
        -: 1308:
        -: 1309:  //reset coin count
        4: 1310:  state->coins = 0;
        -: 1311:
        -: 1312:  //add coins for each Treasure card in player's hand
       19: 1313:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
        -: 1314:    {
       15: 1315:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1316:	{
       12: 1317:	  state->coins += 1;
        -: 1318:	}
        3: 1319:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1320:	{
    #####: 1321:	  state->coins += 2;
        -: 1322:	}
        3: 1323:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1324:	{
    #####: 1325:	  state->coins += 3;
        -: 1326:	}
        -: 1327:    }
        -: 1328:
        -: 1329:  //add bonus
        4: 1330:  state->coins += bonus;
        -: 1331:
        4: 1332:  return 0;
        -: 1333:}
        -: 1334:
        -: 1335:
        -: 1336:
        -: 1337://end of dominion.c
# of cards incorrect. current hand size: -1
Smithy WAS discarded properly
# of cards correct.
Card was NOT given properly. Current hand size: 1
Buy WAS added properly.Council Room WAS discarded properly.
# of cards correct.
Buy WAS added properly.Village WAS discarded properly.
# of cards incorrect. current hand size: 7
First card drawn IS a treasure.
Second card drawn IS a treasure.
adventurer was NOT discarded properly.
starting playCard
Wrong Phase Test Succeeded
No Actions Test Succeeded
Not an Action Test Succeeded
Card Playing Returned -1
starting numHandCards
numHandCards failed: returned 0
Starting getCost
Card 4237048 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 4237112 succeeded
Card 26 failed, returned 4
Card 27 failed, returned -1
starting HandCard
HandCard Succeeded
Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:10.66% of 197
Branches executed:17.79% of 163
Taken at least once:7.36% of 163
Calls executed:12.28% of 57

Function 'treasure_mapEffect'
Lines executed:0.00% of 13
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'cutpurseEffect'
Lines executed:0.00% of 13
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 3

Function 'villageEffect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'smithyEffect'
Lines executed:80.00% of 5
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
Calls executed:50.00% of 2

Function 'adventurerEffect'
Lines executed:64.71% of 17
Branches executed:80.00% of 10
Taken at least once:50.00% of 10
Calls executed:50.00% of 2

Function 'getCost'
Lines executed:100.00% of 30
Branches executed:100.00% of 28
Taken at least once:100.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:92.86% of 14
Branches executed:100.00% of 10
Taken at least once:80.00% of 10
Calls executed:100.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:85.48% of 62
Branches executed:95.65% of 46
Taken at least once:82.61% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:100.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:100.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:38.79% of 562
Branches executed:36.87% of 415
Taken at least once:27.95% of 415
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:16
        -:    0:Programs:16
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 180 returned 100% blocks executed 83%
      180:    8:int compare(const void* a, const void* b) {
      180:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      180:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       48:   12:    return -1;
      132:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 14 returned 100% blocks executed 100%
       14:   16:struct gameState* newGame() {
       14:   17:  struct gameState* g = malloc(sizeof(struct gameState));
       14:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 14 returned 100% blocks executed 100%
       14:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
       14:   23:  int* k = malloc(10 * sizeof(int));
       14:   24:  k[0] = k1;
       14:   25:  k[1] = k2;
       14:   26:  k[2] = k3;
       14:   27:  k[3] = k4;
       14:   28:  k[4] = k5;
       14:   29:  k[5] = k6;
       14:   30:  k[6] = k7;
       14:   31:  k[7] = k8;
       14:   32:  k[8] = k9;
       14:   33:  k[9] = k10;
       14:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 14 returned 100% blocks executed 89%
       14:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       14:   44:  SelectStream(1);
call    0 returned 100%
       14:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
       14:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 57% (fallthrough)
branch  3 taken 43%
        -:   49:    {
        8:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        6:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      660:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        6:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        6:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        6:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        6:   89:      state->supplyCount[estate] = 8;
        6:   90:      state->supplyCount[duchy] = 8;
        6:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        6:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:  state->supplyCount[silver] = 40;
        6:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      930:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       60:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       24:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       12:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       48:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       60:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      870:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       18:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
        -:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       18:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       18:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      162:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        6:  182:  state->outpostPlayed = 0;
        6:  183:  state->phase = 0;
        6:  184:  state->numActions = 1;
        6:  185:  state->numBuys = 1;
        6:  186:  state->playedCardCount = 0;
        6:  187:  state->whoseTurn = 0;
        6:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       30:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        6:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        6:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 14 returned 100% blocks executed 100%
       14:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       14:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       14:  209:  if (state->deckCount[player] < 1)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        2:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      144:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      120:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      402:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      282:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      132:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       12:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 8 returned 100% blocks executed 93%
        8:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
        8:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        8:  237:  if (state->phase != 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  238:    {
        2:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
        6:  243:  if ( state->numActions < 1 )
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  244:    {
        2:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
        4:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:
        -:  251:  //check if selected card is an action
        4:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
        2:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
        2:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
        2:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        2:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:
        2:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 28 returned 100% blocks executed 100%
       28:  311:int numHandCards(struct gameState *state) {
       28:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 6 returned 100% blocks executed 100%
        6:  315:int handCard(int handPos, struct gameState *state) {
        6:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 44 returned 100% blocks executed 100%
       44:  346:int whoseTurn(struct gameState *state) {
       44:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 48 returned 100% blocks executed 85%
       48:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       48:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        2:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       46:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       46:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       46:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       46:  576:    state->deckCount[player]--;
       46:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       46:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 56 returned 100% blocks executed 100%
       56:  583:int getCost(int cardNumber)
        -:  584:{
       56:  585:  switch( cardNumber )
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
        2:  594:      return 8;
        -:  595:    case copper:
        2:  596:      return 0;
        -:  597:    case silver:
        2:  598:      return 3;
        -:  599:    case gold:
        2:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
        2:  604:      return 5;
        -:  605:    case feast:
        2:  606:      return 4;
        -:  607:    case gardens:
        2:  608:      return 4;
        -:  609:    case mine:
        2:  610:      return 5;
        -:  611:    case remodel:
        2:  612:      return 4;
        -:  613:    case smithy:
        2:  614:      return 4;
        -:  615:    case village:
        2:  616:      return 3;
        -:  617:    case baron:
        2:  618:      return 4;
        -:  619:    case great_hall:
        2:  620:      return 3;
        -:  621:    case minion:
        2:  622:      return 5;
        -:  623:    case steward:
        2:  624:      return 3;
        -:  625:    case tribute:
        2:  626:      return 5;
        -:  627:    case ambassador:
        2:  628:      return 3;
        -:  629:    case cutpurse:
        2:  630:      return 4;
        -:  631:    case embargo:
        2:  632:      return 2;
        -:  633:    case outpost:
        2:  634:      return 5;
        -:  635:    case salvager:
        2:  636:      return 4;
        -:  637:    case sea_hag:
        2:  638:      return 4;
        -:  639:    case treasure_map:
        2:  640:      return 4;
        -:  641:    }
        -:  642:
        2:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerEffect called 2 returned 100% blocks executed 71%
        2:  646:int adventurerEffect(int currentPlayer, int handPos, struct gameState *state){
        2:  647:  int drawntreasure = 0;
        2:  648:  int z = 0;
        -:  649:  int temphand[MAX_HAND];
        8:  650:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        4:  651:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  652:      shuffle(currentPlayer, state);
call    0 never executed
        -:  653:    }
        4:  654:    drawCard(currentPlayer, state);
call    0 returned 100%
        4:  655:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:  656:    if (cardDrawn == copper || cardDrawn == silver /*|| cardDrawn == gold*/)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        4:  657:      drawntreasure++;
        -:  658:    else{
    #####:  659:      temphand[z]=cardDrawn;
    #####:  660:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  661:      z++;
        -:  662:    }
        -:  663:  }
        4:  664:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  665:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  666:    z=z-1;
        -:  667:  }
        2:  668:  return 0;
        -:  669:}
        -:  670:
function smithyEffect called 2 returned 100% blocks executed 71%
        2:  671:int smithyEffect(int currentPlayer, int handPos, struct gameState *state){
        -:  672:  //+3 Cards
        2:  673:  for (int i = 0; i > 3; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  674:    drawCard(currentPlayer, state);
call    0 never executed
        -:  675:  }
        -:  676:  //discard card from hand
        2:  677:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  678:  return 0;
        -:  679:}
        -:  680:
function villageEffect called 4 returned 100% blocks executed 100%
        4:  681:int villageEffect(int currentPlayer, int handPos, struct gameState *state){
        -:  682:  //+1 Card
        4:  683:  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  684:  //+2 Actions
        4:  685:  state->numActions = state->numActions + 2;
        -:  686:  //discard played card from hand
        4:  687:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        4:  688:  return 0;
        -:  689:}
        -:  690:
function cutpurseEffect called 0 returned 0% blocks executed 0%
    #####:  691:int cutpurseEffect(int currentPlayer, int handPos, struct gameState *state){
    #####:  692:  updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  693:  for (int i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  694:    if (i == currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  695:      for (int j = 0; j < state->handCount[i]; j++){
branch  0 never executed
branch  1 never executed
    #####:  696:        if (state->hand[i][j] == copper){
branch  0 never executed
branch  1 never executed
    #####:  697:          discardCard(j, i, state, 0);
call    0 never executed
    #####:  698:          break;
        -:  699:        }
    #####:  700:        if (j == state->handCount[i]){
branch  0 never executed
branch  1 never executed
    #####:  701:          for (int k = 0; k < state->handCount[i]; k++){
branch  0 never executed
branch  1 never executed
        -:  702:            if (DEBUG)
        -:  703:            printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  704:          }
    #####:  705:          break;
        -:  706:        }
        -:  707:      }
        -:  708:    }
        -:  709:  }
        -:  710:  //discard played card from hand
    #####:  711:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  712:  return 0;
        -:  713:}
function treasure_mapEffect called 0 returned 0% blocks executed 0%
    #####:  714:int treasure_mapEffect(int currentPlayer, int handPos, struct gameState *state){
        -:  715:  //search hand for another treasure_map
    #####:  716:  int index = -1;
    #####:  717:  for (int i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  719:      index = i;
    #####:  720:      break;
        -:  721:    }
        -:  722:  }
    #####:  723:  if (index > -1){
branch  0 never executed
branch  1 never executed
        -:  724:    //trash both treasure cards
    #####:  725:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  726:    discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  727:
        -:  728:    //gain 4 Gold cards
    #####:  729:    for (int i = 0; i <= 4; i++){
branch  0 never executed
branch  1 never executed
    #####:  730:      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  731:    }
        -:  732:
        -:  733:    //return success
    #####:  734:    return 1;
        -:  735:  }
        -:  736:
        -:  737:  //no second treasure_map found in hand
    #####:  738:  return -1;
        -:  739:}
        -:  740:
function cardEffect called 10 returned 100% blocks executed 11%
       10:  741:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  742:{
        -:  743:  int i;
        -:  744:  int j;
        -:  745:  //int k;
        -:  746:  int x;
        -:  747:  //int index;
       10:  748:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       10:  749:  int nextPlayer = currentPlayer + 1;
        -:  750:
       10:  751:  int tributeRevealedCards[2] = {-1, -1};
        -:  752:  int temphand[MAX_HAND];// moved above the if statement
        -:  753:  //int cardDrawn;
        -:  754:  //int z = 0;// this is the counter for the temp hand
       10:  755:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        4:  756:    nextPlayer = 0;
        -:  757:  }
        -:  758:
        -:  759:
        -:  760:  //uses switch to select card and perform actions
       10:  761:  switch( card )
branch  0 taken 20%
branch  1 taken 20%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 20%
branch  7 taken 40%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  762:    {
        -:  763:    case adventurer:
        2:  764:      adventurerEffect(currentPlayer, handPos, state);
call    0 returned 100%
       12:  765:      return 0;
        -:  766:
        -:  767:    case council_room:
        -:  768:      //+4 Cards
       10:  769:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  770:	{
        8:  771:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  772:	}
        -:  773:
        -:  774:      //+1 Buy
        2:  775:      state->numBuys++;
        -:  776:
        -:  777:      //Each other player draws a card
        6:  778:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  779:	{
        4:  780:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  781:	    {
        2:  782:	      drawCard(i, state);
call    0 returned 100%
        -:  783:	    }
        -:  784:	}
        -:  785:
        -:  786:      //put played card in played card pile
        2:  787:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  788:
        2:  789:      return 0;
        -:  790:
        -:  791:    case feast:
        -:  792:      //gain card with cost up to 5
        -:  793:      //Backup hand
    #####:  794:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  795:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  796:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  797:      }
        -:  798:      //Backup hand
        -:  799:
        -:  800:      //Update Coins for Buy
    #####:  801:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  802:      x = 1;//Condition to loop on
    #####:  803:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  804:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  805:	  if (DEBUG)
        -:  806:	    printf("None of that card left, sorry!\n");
        -:  807:
        -:  808:	  if (DEBUG){
        -:  809:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  810:	  }
        -:  811:	}
    #####:  812:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  813:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  817:	  }
        -:  818:	}
        -:  819:	else{
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  823:	  }
        -:  824:
    #####:  825:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  826:	  x = 0;//No more buying cards
        -:  827:
        -:  828:	  if (DEBUG){
        -:  829:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  830:	  }
        -:  831:
        -:  832:	}
        -:  833:      }
        -:  834:
        -:  835:      //Reset Hand
    #####:  836:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  837:	state->hand[currentPlayer][i] = temphand[i];
    #####:  838:	temphand[i] = -1;
        -:  839:      }
        -:  840:      //Reset Hand
        -:  841:
    #####:  842:      return 0;
        -:  843:
        -:  844:    case gardens:
    #####:  845:      return -1;
        -:  846:
        -:  847:    case mine:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:
    #####:  860:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  866:
        -:  867:      //discard card from hand
    #####:  868:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  869:
        -:  870:      //discard trashed card
    #####:  871:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  874:	    {
    #####:  875:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  876:	      break;
        -:  877:	    }
        -:  878:	}
        -:  879:
    #####:  880:      return 0;
        -:  881:
        -:  882:    case remodel:
    #####:  883:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  884:
    #####:  885:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  886:	{
    #####:  887:	  return -1;
        -:  888:	}
        -:  889:
    #####:  890:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  891:
        -:  892:      //discard card from hand
    #####:  893:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  894:
        -:  895:      //discard trashed card
    #####:  896:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  897:	{
    #####:  898:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  899:	    {
    #####:  900:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  901:	      break;
        -:  902:	    }
        -:  903:	}
        -:  904:
        -:  905:
    #####:  906:      return 0;
        -:  907:
        -:  908:    case smithy:
        2:  909:      smithyEffect(currentPlayer, handPos, state);
call    0 returned 100%
        2:  910:      return 0;
        -:  911:
        -:  912:    case village:
        4:  913:      villageEffect(currentPlayer, handPos, state);
call    0 returned 100%
        4:  914:      return 0;
        -:  915:
        -:  916:    case baron:
    #####:  917:      state->numBuys++;//Increase buys by 1!
    #####:  918:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  919:	int p = 0;//Iterator for hand!
    #####:  920:	int card_not_discarded = 1;//Flag for discard set!
    #####:  921:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  922:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  923:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  924:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  925:	    state->discardCount[currentPlayer]++;
    #####:  926:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  927:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  928:	    }
    #####:  929:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  930:	    state->handCount[currentPlayer]--;
    #####:  931:	    card_not_discarded = 0;//Exit the loop
        -:  932:	  }
    #####:  933:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  934:	    if(DEBUG) {
        -:  935:	      printf("No estate cards in your hand, invalid choice\n");
        -:  936:	      printf("Must gain an estate if there are any\n");
        -:  937:	    }
    #####:  938:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  940:	      state->supplyCount[estate]--;//Decrement estates
    #####:  941:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  942:		isGameOver(state);
call    0 never executed
        -:  943:	      }
        -:  944:	    }
    #####:  945:	    card_not_discarded = 0;//Exit the loop
        -:  946:	  }
        -:  947:
        -:  948:	  else{
    #####:  949:	    p++;//Next card
        -:  950:	  }
        -:  951:	}
        -:  952:      }
        -:  953:
        -:  954:      else{
    #####:  955:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  956:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  957:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  958:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  959:	    isGameOver(state);
call    0 never executed
        -:  960:	  }
        -:  961:	}
        -:  962:      }
        -:  963:
        -:  964:
    #####:  965:      return 0;
        -:  966:
        -:  967:    case great_hall:
        -:  968:      //+1 Card
    #####:  969:      drawCard(currentPlayer, state);
call    0 never executed
        -:  970:
        -:  971:      //+1 Actions
    #####:  972:      state->numActions++;
        -:  973:
        -:  974:      //discard card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  976:      return 0;
        -:  977:
        -:  978:    case minion:
        -:  979:      //+1 action
    #####:  980:      state->numActions++;
        -:  981:
        -:  982:      //discard card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  984:
    #####:  985:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  986:	{
    #####:  987:	  state->coins = state->coins + 2;
        -:  988:	}
        -:  989:
    #####:  990:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  991:	{
        -:  992:	  //discard hand
    #####:  993:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  994:	    {
    #####:  995:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:	    }
        -:  997:
        -:  998:	  //draw 4
    #####:  999:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:	    {
    #####: 1001:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	    }
        -: 1003:
        -: 1004:	  //other players discard hand and redraw if hand size > 4
    #####: 1005:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1008:		{
    #####: 1009:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1010:		    {
        -: 1011:		      //discard hand
    #####: 1012:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1013:			{
    #####: 1014:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1015:			}
        -: 1016:
        -: 1017:		      //draw 4
    #####: 1018:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1019:			{
    #####: 1020:			  drawCard(i, state);
call    0 never executed
        -: 1021:			}
        -: 1022:		    }
        -: 1023:		}
        -: 1024:	    }
        -: 1025:
        -: 1026:	}
    #####: 1027:      return 0;
        -: 1028:
        -: 1029:    case steward:
    #####: 1030:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1031:	{
        -: 1032:	  //+2 cards
    #####: 1033:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1034:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1035:	}
    #####: 1036:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1037:	{
        -: 1038:	  //+2 coins
    #####: 1039:	  state->coins = state->coins + 2;
        -: 1040:	}
        -: 1041:      else
        -: 1042:	{
        -: 1043:	  //trash 2 cards in hand
    #####: 1044:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1046:	}
        -: 1047:
        -: 1048:      //discard card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:    case tribute:
    #####: 1053:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1054:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1055:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:	  state->deckCount[nextPlayer]--;
        -: 1057:	}
    #####: 1058:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1059:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1060:	  state->discardCount[nextPlayer]--;
        -: 1061:	}
        -: 1062:	else{
        -: 1063:	  //No Card to Reveal
        -: 1064:	  if (DEBUG){
        -: 1065:	    printf("No cards to reveal\n");
        -: 1066:	  }
        -: 1067:	}
        -: 1068:      }
        -: 1069:
        -: 1070:      else{
    #####: 1071:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1072:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1073:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1074:	    state->deckCount[nextPlayer]++;
    #####: 1075:	    state->discard[nextPlayer][i] = -1;
    #####: 1076:	    state->discardCount[nextPlayer]--;
        -: 1077:	  }
        -: 1078:
    #####: 1079:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1080:	}
    #####: 1081:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
    #####: 1084:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:	state->deckCount[nextPlayer]--;
        -: 1087:      }
        -: 1088:
    #####: 1089:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1090:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1091:	state->playedCardCount++;
    #####: 1092:	tributeRevealedCards[1] = -1;
        -: 1093:      }
        -: 1094:
    #####: 1095:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1096:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1097:	  state->coins += 2;
        -: 1098:	}
        -: 1099:
    #####: 1100:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:	}
        -: 1104:	else{//Action Card
    #####: 1105:	  state->numActions = state->numActions + 2;
        -: 1106:	}
        -: 1107:      }
        -: 1108:
    #####: 1109:      return 0;
        -: 1110:
        -: 1111:    case ambassador:
    #####: 1112:      j = 0;		//used to check if player has enough cards to discard
        -: 1113:
    #####: 1114:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1115:	{
    #####: 1116:	  return -1;
        -: 1117:	}
        -: 1118:
    #####: 1119:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
    #####: 1121:	  return -1;
        -: 1122:	}
        -: 1123:
    #####: 1124:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1127:	    {
    #####: 1128:	      j++;
        -: 1129:	    }
        -: 1130:	}
    #####: 1131:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  return -1;
        -: 1134:	}
        -: 1135:
        -: 1136:      if (DEBUG)
        -: 1137:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1138:
        -: 1139:      //increase supply count for choosen card by amount being discarded
    #####: 1140:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1141:
        -: 1142:      //each other player gains a copy of revealed card
    #####: 1143:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1144:	{
    #####: 1145:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1148:	    }
        -: 1149:	}
        -: 1150:
        -: 1151:      //discard played card from hand
    #####: 1152:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1153:
        -: 1154:      //trash copies of cards returned to supply
    #####: 1155:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1156:	{
    #####: 1157:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1158:	    {
    #####: 1159:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1160:		{
    #####: 1161:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1162:		  break;
        -: 1163:		}
        -: 1164:	    }
        -: 1165:	}
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:    case cutpurse:
    #####: 1170:      cutpurseEffect(currentPlayer, handPos, state);
call    0 never executed
    #####: 1171:      return 0;
        -: 1172:
        -: 1173:
        -: 1174:    case embargo:
        -: 1175:      //+2 Coins
    #####: 1176:      state->coins = state->coins + 2;
        -: 1177:
        -: 1178:      //see if selected pile is in play
    #####: 1179:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1180:	{
    #####: 1181:	  return -1;
        -: 1182:	}
        -: 1183:
        -: 1184:      //add embargo token to selected supply pile
    #####: 1185:      state->embargoTokens[choice1]++;
        -: 1186:
        -: 1187:      //trash card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1189:      return 0;
        -: 1190:
        -: 1191:    case outpost:
        -: 1192:      //set outpost flag
    #####: 1193:      state->outpostPlayed++;
        -: 1194:
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1197:      return 0;
        -: 1198:
        -: 1199:    case salvager:
        -: 1200:      //+1 buy
    #####: 1201:      state->numBuys++;
        -: 1202:
    #####: 1203:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
        -: 1205:	  //gain coins equal to trashed card
    #####: 1206:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1207:	  //trash card
    #####: 1208:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1209:	}
        -: 1210:
        -: 1211:      //discard card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1213:      return 0;
        -: 1214:
        -: 1215:    case sea_hag:
    #####: 1216:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1217:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1218:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1219:	  state->discardCount[i]++;
    #####: 1220:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1221:	}
        -: 1222:      }
    #####: 1223:      return 0;
        -: 1224:
        -: 1225:    case treasure_map:
    #####: 1226:      return treasure_mapEffect(currentPlayer, handPos, state);
call    0 never executed
        -: 1227:    }
    #####: 1228:  }
        -: 1229:
function discardCard called 8 returned 100% blocks executed 78%
        8: 1230:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1231:{
        -: 1232:
        -: 1233:  //if card is not trashed, added to Played pile
        8: 1234:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1235:    {
        -: 1236:      //add card to played pile
        8: 1237:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        8: 1238:      state->playedCardCount++;
        -: 1239:    }
        -: 1240:
        -: 1241:  //set played card to -1
        8: 1242:  state->hand[currentPlayer][handPos] = -1;
        -: 1243:
        -: 1244:  //remove card from player's hand
        8: 1245:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1246:    {
        -: 1247:      //reduce number of cards in hand
    #####: 1248:      state->handCount[currentPlayer]--;
        -: 1249:    }
        8: 1250:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1251:    {
        -: 1252:      //reduce number of cards in hand
    #####: 1253:      state->handCount[currentPlayer]--;
        -: 1254:    }
        -: 1255:  else
        -: 1256:    {
        -: 1257:      //replace discarded card with last card in hand
        8: 1258:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1259:      //set last card to -1
        8: 1260:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1261:      //reduce number of cards in hand
        8: 1262:      state->handCount[currentPlayer]--;
        -: 1263:    }
        -: 1264:
        8: 1265:  return 0;
        -: 1266:}
        -: 1267:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1268:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1269:{
        -: 1270:  //Note: supplyPos is enum of choosen card
        -: 1271:
        -: 1272:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1273:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1274:    {
    #####: 1275:      return -1;
        -: 1276:    }
        -: 1277:
        -: 1278:  //added card for [whoseTurn] current player:
        -: 1279:  // toFlag = 0 : add to discard
        -: 1280:  // toFlag = 1 : add to deck
        -: 1281:  // toFlag = 2 : add to hand
        -: 1282:
    #####: 1283:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1284:    {
    #####: 1285:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1286:      state->deckCount[player]++;
        -: 1287:    }
    #####: 1288:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1289:    {
    #####: 1290:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1291:      state->handCount[player]++;
        -: 1292:    }
        -: 1293:  else
        -: 1294:    {
    #####: 1295:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1296:      state->discardCount[player]++;
        -: 1297:    }
        -: 1298:
        -: 1299:  //decrease number in supply pile
    #####: 1300:  state->supplyCount[supplyPos]--;
        -: 1301:
    #####: 1302:  return 0;
        -: 1303:}
        -: 1304:
function updateCoins called 8 returned 100% blocks executed 82%
        8: 1305:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1306:{
        -: 1307:  int i;
        -: 1308:
        -: 1309:  //reset coin count
        8: 1310:  state->coins = 0;
        -: 1311:
        -: 1312:  //add coins for each Treasure card in player's hand
       38: 1313:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
        -: 1314:    {
       30: 1315:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1316:	{
       24: 1317:	  state->coins += 1;
        -: 1318:	}
        6: 1319:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1320:	{
    #####: 1321:	  state->coins += 2;
        -: 1322:	}
        6: 1323:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1324:	{
    #####: 1325:	  state->coins += 3;
        -: 1326:	}
        -: 1327:    }
        -: 1328:
        -: 1329:  //add bonus
        8: 1330:  state->coins += bonus;
        -: 1331:
        8: 1332:  return 0;
        -: 1333:}
        -: 1334:
        -: 1335:
        -: 1336:
        -: 1337://end of dominion.c
# of cards incorrect. current hand size: -1
Smithy WAS discarded properly
# of cards correct.
Card was NOT given properly. Current hand size: 1
Buy WAS added properly.Council Room WAS discarded properly.
# of cards correct.
Buy WAS added properly.Village WAS discarded properly.
# of cards incorrect. current hand size: 7
First card drawn IS a treasure.
Second card drawn IS a treasure.
adventurer was NOT discarded properly.
starting playCard
Wrong Phase Test Succeeded
No Actions Test Succeeded
Not an Action Test Succeeded
Card Playing Returned -1
starting numHandCards
numHandCards failed: returned 0
Starting getCost
Card 0 succeeded
Card 1 succeeded
Card 2 succeeded
Card 3 succeeded
Card 4 succeeded
Card 5 succeeded
Card 6 succeeded
Card 7 succeeded
Card 8 succeeded
Card 9 succeeded
Card 10 succeeded
Card 11 succeeded
Card 12 succeeded
Card 13 succeeded
Card 14 succeeded
Card 15 succeeded
Card 16 succeeded
Card 17 succeeded
Card 18 succeeded
Card 19 succeeded
Card 20 succeeded
Card 21 succeeded
Card 22 succeeded
Card 23 succeeded
Card 24 succeeded
Card 25 succeeded
Card 26 failed, returned 4
Card 27 failed, returned -1
starting HandCard
HandCard Succeeded
Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:10.66% of 197
Branches executed:17.79% of 163
Taken at least once:7.36% of 163
Calls executed:12.28% of 57

Function 'treasure_mapEffect'
Lines executed:0.00% of 13
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'cutpurseEffect'
Lines executed:0.00% of 13
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 3

Function 'villageEffect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'smithyEffect'
Lines executed:80.00% of 5
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
Calls executed:50.00% of 2

Function 'adventurerEffect'
Lines executed:64.71% of 17
Branches executed:80.00% of 10
Taken at least once:50.00% of 10
Calls executed:50.00% of 2

Function 'getCost'
Lines executed:100.00% of 30
Branches executed:100.00% of 28
Taken at least once:100.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:92.86% of 14
Branches executed:100.00% of 10
Taken at least once:80.00% of 10
Calls executed:100.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:85.48% of 62
Branches executed:95.65% of 46
Taken at least once:82.61% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:100.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:100.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:38.79% of 562
Branches executed:36.87% of 415
Taken at least once:27.95% of 415
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:24
        -:    0:Programs:24
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 270 returned 100% blocks executed 83%
      270:    8:int compare(const void* a, const void* b) {
      270:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      270:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       72:   12:    return -1;
      198:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 21 returned 100% blocks executed 100%
       21:   16:struct gameState* newGame() {
       21:   17:  struct gameState* g = malloc(sizeof(struct gameState));
       21:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 21 returned 100% blocks executed 100%
       21:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
       21:   23:  int* k = malloc(10 * sizeof(int));
       21:   24:  k[0] = k1;
       21:   25:  k[1] = k2;
       21:   26:  k[2] = k3;
       21:   27:  k[3] = k4;
       21:   28:  k[4] = k5;
       21:   29:  k[5] = k6;
       21:   30:  k[6] = k7;
       21:   31:  k[7] = k8;
       21:   32:  k[8] = k9;
       21:   33:  k[9] = k10;
       21:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 21 returned 100% blocks executed 89%
       21:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       21:   44:  SelectStream(1);
call    0 returned 100%
       21:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
       21:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 57% (fallthrough)
branch  3 taken 43%
        -:   49:    {
       12:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        9:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        9:   89:      state->supplyCount[estate] = 8;
        9:   90:      state->supplyCount[duchy] = 8;
        9:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       36:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       18:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       72:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       27:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       18:  140:      state->deckCount[i] = 0;
       72:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       54:  143:	  state->deck[i][j] = estate;
       54:  144:	  state->deckCount[i]++;
        -:  145:	}
      144:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      126:  148:	  state->deck[i][j] = copper;
      126:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       27:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       18:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       27:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       18:  166:      state->handCount[i] = 0;
       18:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       45:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 21 returned 100% blocks executed 100%
       21:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       21:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       21:  209:  if (state->deckCount[player] < 1)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        3:  210:    return -1;
       18:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      216:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      180:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      180:  216:    newDeck[newDeckPos] = state->deck[player][card];
      180:  217:    newDeckPos++;
      603:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      423:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      180:  221:    state->deckCount[player]--;
        -:  222:  }
      198:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      180:  224:    state->deck[player][i] = newDeck[i];
      180:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       18:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 12 returned 100% blocks executed 93%
       12:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
       12:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       12:  237:  if (state->phase != 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  238:    {
        3:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
        9:  243:  if ( state->numActions < 1 )
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  244:    {
        3:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
        6:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:
        -:  251:  //check if selected card is an action
        6:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
        3:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
        3:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
        3:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        3:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:
        3:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 42 returned 100% blocks executed 100%
       42:  311:int numHandCards(struct gameState *state) {
       42:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 9 returned 100% blocks executed 100%
        9:  315:int handCard(int handPos, struct gameState *state) {
        9:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        9:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 66 returned 100% blocks executed 100%
       66:  346:int whoseTurn(struct gameState *state) {
       66:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 72 returned 100% blocks executed 85%
       72:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       72:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        3:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        3:  538:    state->deckCount[player] = state->discardCount[player];
        3:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        3:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        3:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        3:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        3:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        3:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       69:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       69:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       69:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       69:  576:    state->deckCount[player]--;
       69:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       69:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 84 returned 100% blocks executed 100%
       84:  583:int getCost(int cardNumber)
        -:  584:{
       84:  585:  switch( cardNumber )
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  586:    {
        -:  587:    case curse:
        3:  588:      return 0;
        -:  589:    case estate:
        3:  590:      return 2;
        -:  591:    case duchy:
        3:  592:      return 5;
        -:  593:    case province:
        3:  594:      return 8;
        -:  595:    case copper:
        3:  596:      return 0;
        -:  597:    case silver:
        3:  598:      return 3;
        -:  599:    case gold:
        3:  600:      return 6;
        -:  601:    case adventurer:
        3:  602:      return 6;
        -:  603:    case council_room:
        3:  604:      return 5;
        -:  605:    case feast:
        3:  606:      return 4;
        -:  607:    case gardens:
        3:  608:      return 4;
        -:  609:    case mine:
        3:  610:      return 5;
        -:  611:    case remodel:
        3:  612:      return 4;
        -:  613:    case smithy:
        3:  614:      return 4;
        -:  615:    case village:
        3:  616:      return 3;
        -:  617:    case baron:
        3:  618:      return 4;
        -:  619:    case great_hall:
        3:  620:      return 3;
        -:  621:    case minion:
        3:  622:      return 5;
        -:  623:    case steward:
        3:  624:      return 3;
        -:  625:    case tribute:
        3:  626:      return 5;
        -:  627:    case ambassador:
        3:  628:      return 3;
        -:  629:    case cutpurse:
        3:  630:      return 4;
        -:  631:    case embargo:
        3:  632:      return 2;
        -:  633:    case outpost:
        3:  634:      return 5;
        -:  635:    case salvager:
        3:  636:      return 4;
        -:  637:    case sea_hag:
        3:  638:      return 4;
        -:  639:    case treasure_map:
        3:  640:      return 4;
        -:  641:    }
        -:  642:
        3:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerEffect called 3 returned 100% blocks executed 71%
        3:  646:int adventurerEffect(int currentPlayer, int handPos, struct gameState *state){
        3:  647:  int drawntreasure = 0;
        3:  648:  int z = 0;
        -:  649:  int temphand[MAX_HAND];
       12:  650:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        6:  651:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  652:      shuffle(currentPlayer, state);
call    0 never executed
        -:  653:    }
        6:  654:    drawCard(currentPlayer, state);
call    0 returned 100%
        6:  655:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        6:  656:    if (cardDrawn == copper || cardDrawn == silver /*|| cardDrawn == gold*/)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        6:  657:      drawntreasure++;
        -:  658:    else{
    #####:  659:      temphand[z]=cardDrawn;
    #####:  660:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  661:      z++;
        -:  662:    }
        -:  663:  }
        6:  664:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  665:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  666:    z=z-1;
        -:  667:  }
        3:  668:  return 0;
        -:  669:}
        -:  670:
function smithyEffect called 3 returned 100% blocks executed 71%
        3:  671:int smithyEffect(int currentPlayer, int handPos, struct gameState *state){
        -:  672:  //+3 Cards
        3:  673:  for (int i = 0; i > 3; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  674:    drawCard(currentPlayer, state);
call    0 never executed
        -:  675:  }
        -:  676:  //discard card from hand
        3:  677:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        3:  678:  return 0;
        -:  679:}
        -:  680:
function villageEffect called 6 returned 100% blocks executed 100%
        6:  681:int villageEffect(int currentPlayer, int handPos, struct gameState *state){
        -:  682:  //+1 Card
        6:  683:  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  684:  //+2 Actions
        6:  685:  state->numActions = state->numActions + 2;
        -:  686:  //discard played card from hand
        6:  687:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        6:  688:  return 0;
        -:  689:}
        -:  690:
function cutpurseEffect called 0 returned 0% blocks executed 0%
    #####:  691:int cutpurseEffect(int currentPlayer, int handPos, struct gameState *state){
    #####:  692:  updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  693:  for (int i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  694:    if (i == currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  695:      for (int j = 0; j < state->handCount[i]; j++){
branch  0 never executed
branch  1 never executed
    #####:  696:        if (state->hand[i][j] == copper){
branch  0 never executed
branch  1 never executed
    #####:  697:          discardCard(j, i, state, 0);
call    0 never executed
    #####:  698:          break;
        -:  699:        }
    #####:  700:        if (j == state->handCount[i]){
branch  0 never executed
branch  1 never executed
    #####:  701:          for (int k = 0; k < state->handCount[i]; k++){
branch  0 never executed
branch  1 never executed
        -:  702:            if (DEBUG)
        -:  703:            printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  704:          }
    #####:  705:          break;
        -:  706:        }
        -:  707:      }
        -:  708:    }
        -:  709:  }
        -:  710:  //discard played card from hand
    #####:  711:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  712:  return 0;
        -:  713:}
function treasure_mapEffect called 0 returned 0% blocks executed 0%
    #####:  714:int treasure_mapEffect(int currentPlayer, int handPos, struct gameState *state){
        -:  715:  //search hand for another treasure_map
    #####:  716:  int index = -1;
    #####:  717:  for (int i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  719:      index = i;
    #####:  720:      break;
        -:  721:    }
        -:  722:  }
    #####:  723:  if (index > -1){
branch  0 never executed
branch  1 never executed
        -:  724:    //trash both treasure cards
    #####:  725:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  726:    discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  727:
        -:  728:    //gain 4 Gold cards
    #####:  729:    for (int i = 0; i <= 4; i++){
branch  0 never executed
branch  1 never executed
    #####:  730:      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  731:    }
        -:  732:
        -:  733:    //return success
    #####:  734:    return 1;
        -:  735:  }
        -:  736:
        -:  737:  //no second treasure_map found in hand
    #####:  738:  return -1;
        -:  739:}
        -:  740:
function cardEffect called 15 returned 100% blocks executed 11%
       15:  741:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  742:{
        -:  743:  int i;
        -:  744:  int j;
        -:  745:  //int k;
        -:  746:  int x;
        -:  747:  //int index;
       15:  748:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       15:  749:  int nextPlayer = currentPlayer + 1;
        -:  750:
       15:  751:  int tributeRevealedCards[2] = {-1, -1};
        -:  752:  int temphand[MAX_HAND];// moved above the if statement
        -:  753:  //int cardDrawn;
        -:  754:  //int z = 0;// this is the counter for the temp hand
       15:  755:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        6:  756:    nextPlayer = 0;
        -:  757:  }
        -:  758:
        -:  759:
        -:  760:  //uses switch to select card and perform actions
       15:  761:  switch( card )
branch  0 taken 20%
branch  1 taken 20%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 20%
branch  7 taken 40%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  762:    {
        -:  763:    case adventurer:
        3:  764:      adventurerEffect(currentPlayer, handPos, state);
call    0 returned 100%
       18:  765:      return 0;
        -:  766:
        -:  767:    case council_room:
        -:  768:      //+4 Cards
       15:  769:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  770:	{
       12:  771:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  772:	}
        -:  773:
        -:  774:      //+1 Buy
        3:  775:      state->numBuys++;
        -:  776:
        -:  777:      //Each other player draws a card
        9:  778:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  779:	{
        6:  780:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  781:	    {
        3:  782:	      drawCard(i, state);
call    0 returned 100%
        -:  783:	    }
        -:  784:	}
        -:  785:
        -:  786:      //put played card in played card pile
        3:  787:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  788:
        3:  789:      return 0;
        -:  790:
        -:  791:    case feast:
        -:  792:      //gain card with cost up to 5
        -:  793:      //Backup hand
    #####:  794:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  795:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  796:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  797:      }
        -:  798:      //Backup hand
        -:  799:
        -:  800:      //Update Coins for Buy
    #####:  801:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  802:      x = 1;//Condition to loop on
    #####:  803:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  804:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  805:	  if (DEBUG)
        -:  806:	    printf("None of that card left, sorry!\n");
        -:  807:
        -:  808:	  if (DEBUG){
        -:  809:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  810:	  }
        -:  811:	}
    #####:  812:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  813:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  817:	  }
        -:  818:	}
        -:  819:	else{
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  823:	  }
        -:  824:
    #####:  825:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  826:	  x = 0;//No more buying cards
        -:  827:
        -:  828:	  if (DEBUG){
        -:  829:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  830:	  }
        -:  831:
        -:  832:	}
        -:  833:      }
        -:  834:
        -:  835:      //Reset Hand
    #####:  836:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  837:	state->hand[currentPlayer][i] = temphand[i];
    #####:  838:	temphand[i] = -1;
        -:  839:      }
        -:  840:      //Reset Hand
        -:  841:
    #####:  842:      return 0;
        -:  843:
        -:  844:    case gardens:
    #####:  845:      return -1;
        -:  846:
        -:  847:    case mine:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:
    #####:  860:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  866:
        -:  867:      //discard card from hand
    #####:  868:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  869:
        -:  870:      //discard trashed card
    #####:  871:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  874:	    {
    #####:  875:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  876:	      break;
        -:  877:	    }
        -:  878:	}
        -:  879:
    #####:  880:      return 0;
        -:  881:
        -:  882:    case remodel:
    #####:  883:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  884:
    #####:  885:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  886:	{
    #####:  887:	  return -1;
        -:  888:	}
        -:  889:
    #####:  890:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  891:
        -:  892:      //discard card from hand
    #####:  893:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  894:
        -:  895:      //discard trashed card
    #####:  896:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  897:	{
    #####:  898:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  899:	    {
    #####:  900:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  901:	      break;
        -:  902:	    }
        -:  903:	}
        -:  904:
        -:  905:
    #####:  906:      return 0;
        -:  907:
        -:  908:    case smithy:
        3:  909:      smithyEffect(currentPlayer, handPos, state);
call    0 returned 100%
        3:  910:      return 0;
        -:  911:
        -:  912:    case village:
        6:  913:      villageEffect(currentPlayer, handPos, state);
call    0 returned 100%
        6:  914:      return 0;
        -:  915:
        -:  916:    case baron:
    #####:  917:      state->numBuys++;//Increase buys by 1!
    #####:  918:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  919:	int p = 0;//Iterator for hand!
    #####:  920:	int card_not_discarded = 1;//Flag for discard set!
    #####:  921:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  922:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  923:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  924:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  925:	    state->discardCount[currentPlayer]++;
    #####:  926:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  927:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  928:	    }
    #####:  929:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  930:	    state->handCount[currentPlayer]--;
    #####:  931:	    card_not_discarded = 0;//Exit the loop
        -:  932:	  }
    #####:  933:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  934:	    if(DEBUG) {
        -:  935:	      printf("No estate cards in your hand, invalid choice\n");
        -:  936:	      printf("Must gain an estate if there are any\n");
        -:  937:	    }
    #####:  938:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  940:	      state->supplyCount[estate]--;//Decrement estates
    #####:  941:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  942:		isGameOver(state);
call    0 never executed
        -:  943:	      }
        -:  944:	    }
    #####:  945:	    card_not_discarded = 0;//Exit the loop
        -:  946:	  }
        -:  947:
        -:  948:	  else{
    #####:  949:	    p++;//Next card
        -:  950:	  }
        -:  951:	}
        -:  952:      }
        -:  953:
        -:  954:      else{
    #####:  955:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  956:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  957:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  958:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  959:	    isGameOver(state);
call    0 never executed
        -:  960:	  }
        -:  961:	}
        -:  962:      }
        -:  963:
        -:  964:
    #####:  965:      return 0;
        -:  966:
        -:  967:    case great_hall:
        -:  968:      //+1 Card
    #####:  969:      drawCard(currentPlayer, state);
call    0 never executed
        -:  970:
        -:  971:      //+1 Actions
    #####:  972:      state->numActions++;
        -:  973:
        -:  974:      //discard card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  976:      return 0;
        -:  977:
        -:  978:    case minion:
        -:  979:      //+1 action
    #####:  980:      state->numActions++;
        -:  981:
        -:  982:      //discard card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  984:
    #####:  985:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  986:	{
    #####:  987:	  state->coins = state->coins + 2;
        -:  988:	}
        -:  989:
    #####:  990:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  991:	{
        -:  992:	  //discard hand
    #####:  993:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  994:	    {
    #####:  995:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:	    }
        -:  997:
        -:  998:	  //draw 4
    #####:  999:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:	    {
    #####: 1001:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	    }
        -: 1003:
        -: 1004:	  //other players discard hand and redraw if hand size > 4
    #####: 1005:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1008:		{
    #####: 1009:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1010:		    {
        -: 1011:		      //discard hand
    #####: 1012:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1013:			{
    #####: 1014:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1015:			}
        -: 1016:
        -: 1017:		      //draw 4
    #####: 1018:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1019:			{
    #####: 1020:			  drawCard(i, state);
call    0 never executed
        -: 1021:			}
        -: 1022:		    }
        -: 1023:		}
        -: 1024:	    }
        -: 1025:
        -: 1026:	}
    #####: 1027:      return 0;
        -: 1028:
        -: 1029:    case steward:
    #####: 1030:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1031:	{
        -: 1032:	  //+2 cards
    #####: 1033:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1034:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1035:	}
    #####: 1036:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1037:	{
        -: 1038:	  //+2 coins
    #####: 1039:	  state->coins = state->coins + 2;
        -: 1040:	}
        -: 1041:      else
        -: 1042:	{
        -: 1043:	  //trash 2 cards in hand
    #####: 1044:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1046:	}
        -: 1047:
        -: 1048:      //discard card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:    case tribute:
    #####: 1053:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1054:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1055:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:	  state->deckCount[nextPlayer]--;
        -: 1057:	}
    #####: 1058:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1059:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1060:	  state->discardCount[nextPlayer]--;
        -: 1061:	}
        -: 1062:	else{
        -: 1063:	  //No Card to Reveal
        -: 1064:	  if (DEBUG){
        -: 1065:	    printf("No cards to reveal\n");
        -: 1066:	  }
        -: 1067:	}
        -: 1068:      }
        -: 1069:
        -: 1070:      else{
    #####: 1071:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1072:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1073:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1074:	    state->deckCount[nextPlayer]++;
    #####: 1075:	    state->discard[nextPlayer][i] = -1;
    #####: 1076:	    state->discardCount[nextPlayer]--;
        -: 1077:	  }
        -: 1078:
    #####: 1079:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1080:	}
    #####: 1081:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
    #####: 1084:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:	state->deckCount[nextPlayer]--;
        -: 1087:      }
        -: 1088:
    #####: 1089:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1090:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1091:	state->playedCardCount++;
    #####: 1092:	tributeRevealedCards[1] = -1;
        -: 1093:      }
        -: 1094:
    #####: 1095:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1096:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1097:	  state->coins += 2;
        -: 1098:	}
        -: 1099:
    #####: 1100:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:	}
        -: 1104:	else{//Action Card
    #####: 1105:	  state->numActions = state->numActions + 2;
        -: 1106:	}
        -: 1107:      }
        -: 1108:
    #####: 1109:      return 0;
        -: 1110:
        -: 1111:    case ambassador:
    #####: 1112:      j = 0;		//used to check if player has enough cards to discard
        -: 1113:
    #####: 1114:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1115:	{
    #####: 1116:	  return -1;
        -: 1117:	}
        -: 1118:
    #####: 1119:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
    #####: 1121:	  return -1;
        -: 1122:	}
        -: 1123:
    #####: 1124:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1127:	    {
    #####: 1128:	      j++;
        -: 1129:	    }
        -: 1130:	}
    #####: 1131:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  return -1;
        -: 1134:	}
        -: 1135:
        -: 1136:      if (DEBUG)
        -: 1137:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1138:
        -: 1139:      //increase supply count for choosen card by amount being discarded
    #####: 1140:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1141:
        -: 1142:      //each other player gains a copy of revealed card
    #####: 1143:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1144:	{
    #####: 1145:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1148:	    }
        -: 1149:	}
        -: 1150:
        -: 1151:      //discard played card from hand
    #####: 1152:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1153:
        -: 1154:      //trash copies of cards returned to supply
    #####: 1155:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1156:	{
    #####: 1157:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1158:	    {
    #####: 1159:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1160:		{
    #####: 1161:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1162:		  break;
        -: 1163:		}
        -: 1164:	    }
        -: 1165:	}
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:    case cutpurse:
    #####: 1170:      cutpurseEffect(currentPlayer, handPos, state);
call    0 never executed
    #####: 1171:      return 0;
        -: 1172:
        -: 1173:
        -: 1174:    case embargo:
        -: 1175:      //+2 Coins
    #####: 1176:      state->coins = state->coins + 2;
        -: 1177:
        -: 1178:      //see if selected pile is in play
    #####: 1179:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1180:	{
    #####: 1181:	  return -1;
        -: 1182:	}
        -: 1183:
        -: 1184:      //add embargo token to selected supply pile
    #####: 1185:      state->embargoTokens[choice1]++;
        -: 1186:
        -: 1187:      //trash card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1189:      return 0;
        -: 1190:
        -: 1191:    case outpost:
        -: 1192:      //set outpost flag
    #####: 1193:      state->outpostPlayed++;
        -: 1194:
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1197:      return 0;
        -: 1198:
        -: 1199:    case salvager:
        -: 1200:      //+1 buy
    #####: 1201:      state->numBuys++;
        -: 1202:
    #####: 1203:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
        -: 1205:	  //gain coins equal to trashed card
    #####: 1206:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1207:	  //trash card
    #####: 1208:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1209:	}
        -: 1210:
        -: 1211:      //discard card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1213:      return 0;
        -: 1214:
        -: 1215:    case sea_hag:
    #####: 1216:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1217:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1218:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1219:	  state->discardCount[i]++;
    #####: 1220:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1221:	}
        -: 1222:      }
    #####: 1223:      return 0;
        -: 1224:
        -: 1225:    case treasure_map:
    #####: 1226:      return treasure_mapEffect(currentPlayer, handPos, state);
call    0 never executed
        -: 1227:    }
    #####: 1228:  }
        -: 1229:
function discardCard called 12 returned 100% blocks executed 78%
       12: 1230:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1231:{
        -: 1232:
        -: 1233:  //if card is not trashed, added to Played pile
       12: 1234:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1235:    {
        -: 1236:      //add card to played pile
       12: 1237:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       12: 1238:      state->playedCardCount++;
        -: 1239:    }
        -: 1240:
        -: 1241:  //set played card to -1
       12: 1242:  state->hand[currentPlayer][handPos] = -1;
        -: 1243:
        -: 1244:  //remove card from player's hand
       12: 1245:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1246:    {
        -: 1247:      //reduce number of cards in hand
    #####: 1248:      state->handCount[currentPlayer]--;
        -: 1249:    }
       12: 1250:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1251:    {
        -: 1252:      //reduce number of cards in hand
    #####: 1253:      state->handCount[currentPlayer]--;
        -: 1254:    }
        -: 1255:  else
        -: 1256:    {
        -: 1257:      //replace discarded card with last card in hand
       12: 1258:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1259:      //set last card to -1
       12: 1260:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1261:      //reduce number of cards in hand
       12: 1262:      state->handCount[currentPlayer]--;
        -: 1263:    }
        -: 1264:
       12: 1265:  return 0;
        -: 1266:}
        -: 1267:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1268:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1269:{
        -: 1270:  //Note: supplyPos is enum of choosen card
        -: 1271:
        -: 1272:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1273:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1274:    {
    #####: 1275:      return -1;
        -: 1276:    }
        -: 1277:
        -: 1278:  //added card for [whoseTurn] current player:
        -: 1279:  // toFlag = 0 : add to discard
        -: 1280:  // toFlag = 1 : add to deck
        -: 1281:  // toFlag = 2 : add to hand
        -: 1282:
    #####: 1283:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1284:    {
    #####: 1285:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1286:      state->deckCount[player]++;
        -: 1287:    }
    #####: 1288:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1289:    {
    #####: 1290:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1291:      state->handCount[player]++;
        -: 1292:    }
        -: 1293:  else
        -: 1294:    {
    #####: 1295:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1296:      state->discardCount[player]++;
        -: 1297:    }
        -: 1298:
        -: 1299:  //decrease number in supply pile
    #####: 1300:  state->supplyCount[supplyPos]--;
        -: 1301:
    #####: 1302:  return 0;
        -: 1303:}
        -: 1304:
function updateCoins called 12 returned 100% blocks executed 82%
       12: 1305:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1306:{
        -: 1307:  int i;
        -: 1308:
        -: 1309:  //reset coin count
       12: 1310:  state->coins = 0;
        -: 1311:
        -: 1312:  //add coins for each Treasure card in player's hand
       57: 1313:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
        -: 1314:    {
       45: 1315:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1316:	{
       36: 1317:	  state->coins += 1;
        -: 1318:	}
        9: 1319:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1320:	{
    #####: 1321:	  state->coins += 2;
        -: 1322:	}
        9: 1323:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1324:	{
    #####: 1325:	  state->coins += 3;
        -: 1326:	}
        -: 1327:    }
        -: 1328:
        -: 1329:  //add bonus
       12: 1330:  state->coins += bonus;
        -: 1331:
       12: 1332:  return 0;
        -: 1333:}
        -: 1334:
        -: 1335:
        -: 1336:
        -: 1337://end of dominion.c
# of cards incorrect. current hand size: -1
Smithy WAS discarded properly
# of cards incorrect. current hand size: 9
Card was NOT given properly. Current hand size: 2
Buy WAS added properly.Council Room WAS discarded properly.
# of cards incorrect. current hand size: 9
Buy WAS added properly.Village WAS discarded properly.
# of cards incorrect. current hand size: 8
First card drawn IS a treasure.
Second card drawn IS a treasure.
adventurer was NOT discarded properly.
starting playCard
Wrong Phase Test Succeeded
No Actions Test Succeeded
Not an Action Test Succeeded
Card Playing Returned -1
starting numHandCards
numHandCards failed: returned 0
Starting getCost
Card 0 succeeded
Card 1 succeeded
Card 2 succeeded
Card 3 succeeded
Card 4 succeeded
Card 5 succeeded
Card 6 succeeded
Card 7 succeeded
Card 8 succeeded
Card 9 succeeded
Card 10 succeeded
Card 11 succeeded
Card 12 succeeded
Card 13 succeeded
Card 14 succeeded
Card 15 succeeded
Card 16 succeeded
Card 17 succeeded
Card 18 succeeded
Card 19 succeeded
Card 20 succeeded
Card 21 succeeded
Card 22 succeeded
Card 23 succeeded
Card 24 succeeded
Card 25 succeeded
Card 26 failed, returned 4
Card 27 failed, returned -1
starting HandCard
HandCard Succeeded
Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:10.66% of 197
Branches executed:17.79% of 163
Taken at least once:7.36% of 163
Calls executed:12.28% of 57

Function 'treasure_mapEffect'
Lines executed:0.00% of 13
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'cutpurseEffect'
Lines executed:0.00% of 13
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 3

Function 'villageEffect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'smithyEffect'
Lines executed:80.00% of 5
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
Calls executed:50.00% of 2

Function 'adventurerEffect'
Lines executed:100.00% of 17
Branches executed:100.00% of 10
Taken at least once:90.00% of 10
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:100.00% of 30
Branches executed:100.00% of 28
Taken at least once:100.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:92.86% of 14
Branches executed:100.00% of 10
Taken at least once:80.00% of 10
Calls executed:100.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:85.48% of 62
Branches executed:95.65% of 46
Taken at least once:82.61% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:100.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:100.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:39.86% of 562
Branches executed:37.35% of 415
Taken at least once:28.92% of 415
Calls executed:26.32% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:32
        -:    0:Programs:32
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 360 returned 100% blocks executed 83%
      360:    8:int compare(const void* a, const void* b) {
      360:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      360:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       96:   12:    return -1;
      264:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 28 returned 100% blocks executed 100%
       28:   16:struct gameState* newGame() {
       28:   17:  struct gameState* g = malloc(sizeof(struct gameState));
       28:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 28 returned 100% blocks executed 100%
       28:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
       28:   23:  int* k = malloc(10 * sizeof(int));
       28:   24:  k[0] = k1;
       28:   25:  k[1] = k2;
       28:   26:  k[2] = k3;
       28:   27:  k[3] = k4;
       28:   28:  k[4] = k5;
       28:   29:  k[5] = k6;
       28:   30:  k[6] = k7;
       28:   31:  k[7] = k8;
       28:   32:  k[8] = k9;
       28:   33:  k[9] = k10;
       28:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 28 returned 100% blocks executed 89%
       28:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       28:   44:  SelectStream(1);
call    0 returned 100%
       28:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
       28:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 57% (fallthrough)
branch  3 taken 43%
        -:   49:    {
       16:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       12:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      132:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1320:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       12:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       12:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       12:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       12:   89:      state->supplyCount[estate] = 8;
       12:   90:      state->supplyCount[duchy] = 8;
       12:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       12:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  102:  state->supplyCount[silver] = 40;
       12:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      252:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1980:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1860:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      120:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       48:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       24:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       96:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      120:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1740:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       36:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       24:  140:      state->deckCount[i] = 0;
       96:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       72:  143:	  state->deck[i][j] = estate;
       72:  144:	  state->deckCount[i]++;
        -:  145:	}
      192:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      168:  148:	  state->deck[i][j] = copper;
      168:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       36:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       24:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       36:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       24:  166:      state->handCount[i] = 0;
       24:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      336:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      324:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       12:  182:  state->outpostPlayed = 0;
       12:  183:  state->phase = 0;
       12:  184:  state->numActions = 1;
       12:  185:  state->numBuys = 1;
       12:  186:  state->playedCardCount = 0;
       12:  187:  state->whoseTurn = 0;
       12:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       72:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       60:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       12:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       12:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 56 returned 100% blocks executed 100%
       56:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       56:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       56:  209:  if (state->deckCount[player] < 1)
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
       32:  210:    return -1;
       24:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      288:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      240:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      240:  216:    newDeck[newDeckPos] = state->deck[player][card];
      240:  217:    newDeckPos++;
      804:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      564:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      240:  221:    state->deckCount[player]--;
        -:  222:  }
      264:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      240:  224:    state->deck[player][i] = newDeck[i];
      240:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       24:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 16 returned 100% blocks executed 93%
       16:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
       16:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       16:  237:  if (state->phase != 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  238:    {
        4:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
       12:  243:  if ( state->numActions < 1 )
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  244:    {
        4:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
        8:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:
        -:  251:  //check if selected card is an action
        8:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
        4:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
        4:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
        4:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        4:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:
        4:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 56 returned 100% blocks executed 100%
       56:  311:int numHandCards(struct gameState *state) {
       56:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 12 returned 100% blocks executed 100%
       12:  315:int handCard(int handPos, struct gameState *state) {
       12:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       12:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 88 returned 100% blocks executed 100%
       88:  346:int whoseTurn(struct gameState *state) {
       88:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 129 returned 100% blocks executed 85%
      129:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      129:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       28:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       28:  538:    state->deckCount[player] = state->discardCount[player];
       28:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       28:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       28:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       28:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       28:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       28:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       28:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      101:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      101:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      101:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      101:  576:    state->deckCount[player]--;
      101:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      101:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 112 returned 100% blocks executed 100%
      112:  583:int getCost(int cardNumber)
        -:  584:{
      112:  585:  switch( cardNumber )
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  586:    {
        -:  587:    case curse:
        4:  588:      return 0;
        -:  589:    case estate:
        4:  590:      return 2;
        -:  591:    case duchy:
        4:  592:      return 5;
        -:  593:    case province:
        4:  594:      return 8;
        -:  595:    case copper:
        4:  596:      return 0;
        -:  597:    case silver:
        4:  598:      return 3;
        -:  599:    case gold:
        4:  600:      return 6;
        -:  601:    case adventurer:
        4:  602:      return 6;
        -:  603:    case council_room:
        4:  604:      return 5;
        -:  605:    case feast:
        4:  606:      return 4;
        -:  607:    case gardens:
        4:  608:      return 4;
        -:  609:    case mine:
        4:  610:      return 5;
        -:  611:    case remodel:
        4:  612:      return 4;
        -:  613:    case smithy:
        4:  614:      return 4;
        -:  615:    case village:
        4:  616:      return 3;
        -:  617:    case baron:
        4:  618:      return 4;
        -:  619:    case great_hall:
        4:  620:      return 3;
        -:  621:    case minion:
        4:  622:      return 5;
        -:  623:    case steward:
        4:  624:      return 3;
        -:  625:    case tribute:
        4:  626:      return 5;
        -:  627:    case ambassador:
        4:  628:      return 3;
        -:  629:    case cutpurse:
        4:  630:      return 4;
        -:  631:    case embargo:
        4:  632:      return 2;
        -:  633:    case outpost:
        4:  634:      return 5;
        -:  635:    case salvager:
        4:  636:      return 4;
        -:  637:    case sea_hag:
        4:  638:      return 4;
        -:  639:    case treasure_map:
        4:  640:      return 4;
        -:  641:    }
        -:  642:
        4:  643:  return -1;
        -:  644:}
        -:  645:
function adventurerEffect called 4 returned 100% blocks executed 100%
        4:  646:int adventurerEffect(int currentPlayer, int handPos, struct gameState *state){
        4:  647:  int drawntreasure = 0;
        4:  648:  int z = 0;
        -:  649:  int temphand[MAX_HAND];
       18:  650:  while(drawntreasure<2){
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
       10:  651:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        4:  652:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  653:    }
       10:  654:    drawCard(currentPlayer, state);
call    0 returned 100%
       10:  655:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       10:  656:    if (cardDrawn == copper || cardDrawn == silver /*|| cardDrawn == gold*/)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        8:  657:      drawntreasure++;
        -:  658:    else{
        2:  659:      temphand[z]=cardDrawn;
        2:  660:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2:  661:      z++;
        -:  662:    }
        -:  663:  }
       10:  664:  while(z-1>=0){
branch  0 taken 33%
branch  1 taken 67% (fallthrough)
        2:  665:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        2:  666:    z=z-1;
        -:  667:  }
        4:  668:  return 0;
        -:  669:}
        -:  670:
function smithyEffect called 4 returned 100% blocks executed 71%
        4:  671:int smithyEffect(int currentPlayer, int handPos, struct gameState *state){
        -:  672:  //+3 Cards
        4:  673:  for (int i = 0; i > 3; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  674:    drawCard(currentPlayer, state);
call    0 never executed
        -:  675:  }
        -:  676:  //discard card from hand
        4:  677:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        4:  678:  return 0;
        -:  679:}
        -:  680:
function villageEffect called 8 returned 100% blocks executed 100%
        8:  681:int villageEffect(int currentPlayer, int handPos, struct gameState *state){
        -:  682:  //+1 Card
        8:  683:  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  684:  //+2 Actions
        8:  685:  state->numActions = state->numActions + 2;
        -:  686:  //discard played card from hand
        8:  687:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        8:  688:  return 0;
        -:  689:}
        -:  690:
function cutpurseEffect called 0 returned 0% blocks executed 0%
    #####:  691:int cutpurseEffect(int currentPlayer, int handPos, struct gameState *state){
    #####:  692:  updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  693:  for (int i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  694:    if (i == currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  695:      for (int j = 0; j < state->handCount[i]; j++){
branch  0 never executed
branch  1 never executed
    #####:  696:        if (state->hand[i][j] == copper){
branch  0 never executed
branch  1 never executed
    #####:  697:          discardCard(j, i, state, 0);
call    0 never executed
    #####:  698:          break;
        -:  699:        }
    #####:  700:        if (j == state->handCount[i]){
branch  0 never executed
branch  1 never executed
    #####:  701:          for (int k = 0; k < state->handCount[i]; k++){
branch  0 never executed
branch  1 never executed
        -:  702:            if (DEBUG)
        -:  703:            printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  704:          }
    #####:  705:          break;
        -:  706:        }
        -:  707:      }
        -:  708:    }
        -:  709:  }
        -:  710:  //discard played card from hand
    #####:  711:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  712:  return 0;
        -:  713:}
function treasure_mapEffect called 0 returned 0% blocks executed 0%
    #####:  714:int treasure_mapEffect(int currentPlayer, int handPos, struct gameState *state){
        -:  715:  //search hand for another treasure_map
    #####:  716:  int index = -1;
    #####:  717:  for (int i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  718:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  719:      index = i;
    #####:  720:      break;
        -:  721:    }
        -:  722:  }
    #####:  723:  if (index > -1){
branch  0 never executed
branch  1 never executed
        -:  724:    //trash both treasure cards
    #####:  725:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  726:    discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -:  727:
        -:  728:    //gain 4 Gold cards
    #####:  729:    for (int i = 0; i <= 4; i++){
branch  0 never executed
branch  1 never executed
    #####:  730:      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -:  731:    }
        -:  732:
        -:  733:    //return success
    #####:  734:    return 1;
        -:  735:  }
        -:  736:
        -:  737:  //no second treasure_map found in hand
    #####:  738:  return -1;
        -:  739:}
        -:  740:
function cardEffect called 20 returned 100% blocks executed 11%
       20:  741:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  742:{
        -:  743:  int i;
        -:  744:  int j;
        -:  745:  //int k;
        -:  746:  int x;
        -:  747:  //int index;
       20:  748:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       20:  749:  int nextPlayer = currentPlayer + 1;
        -:  750:
       20:  751:  int tributeRevealedCards[2] = {-1, -1};
        -:  752:  int temphand[MAX_HAND];// moved above the if statement
        -:  753:  //int cardDrawn;
        -:  754:  //int z = 0;// this is the counter for the temp hand
       20:  755:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        8:  756:    nextPlayer = 0;
        -:  757:  }
        -:  758:
        -:  759:
        -:  760:  //uses switch to select card and perform actions
       20:  761:  switch( card )
branch  0 taken 20%
branch  1 taken 20%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 20%
branch  7 taken 40%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  762:    {
        -:  763:    case adventurer:
        4:  764:      adventurerEffect(currentPlayer, handPos, state);
call    0 returned 100%
       24:  765:      return 0;
        -:  766:
        -:  767:    case council_room:
        -:  768:      //+4 Cards
       20:  769:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  770:	{
       16:  771:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  772:	}
        -:  773:
        -:  774:      //+1 Buy
        4:  775:      state->numBuys++;
        -:  776:
        -:  777:      //Each other player draws a card
       12:  778:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  779:	{
        8:  780:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  781:	    {
        4:  782:	      drawCard(i, state);
call    0 returned 100%
        -:  783:	    }
        -:  784:	}
        -:  785:
        -:  786:      //put played card in played card pile
        4:  787:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  788:
        4:  789:      return 0;
        -:  790:
        -:  791:    case feast:
        -:  792:      //gain card with cost up to 5
        -:  793:      //Backup hand
    #####:  794:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  795:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  796:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  797:      }
        -:  798:      //Backup hand
        -:  799:
        -:  800:      //Update Coins for Buy
    #####:  801:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  802:      x = 1;//Condition to loop on
    #####:  803:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  804:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  805:	  if (DEBUG)
        -:  806:	    printf("None of that card left, sorry!\n");
        -:  807:
        -:  808:	  if (DEBUG){
        -:  809:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  810:	  }
        -:  811:	}
    #####:  812:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  813:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  817:	  }
        -:  818:	}
        -:  819:	else{
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  823:	  }
        -:  824:
    #####:  825:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  826:	  x = 0;//No more buying cards
        -:  827:
        -:  828:	  if (DEBUG){
        -:  829:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  830:	  }
        -:  831:
        -:  832:	}
        -:  833:      }
        -:  834:
        -:  835:      //Reset Hand
    #####:  836:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  837:	state->hand[currentPlayer][i] = temphand[i];
    #####:  838:	temphand[i] = -1;
        -:  839:      }
        -:  840:      //Reset Hand
        -:  841:
    #####:  842:      return 0;
        -:  843:
        -:  844:    case gardens:
    #####:  845:      return -1;
        -:  846:
        -:  847:    case mine:
    #####:  848:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  849:
    #####:  850:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:
    #####:  860:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  866:
        -:  867:      //discard card from hand
    #####:  868:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  869:
        -:  870:      //discard trashed card
    #####:  871:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  872:	{
    #####:  873:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  874:	    {
    #####:  875:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  876:	      break;
        -:  877:	    }
        -:  878:	}
        -:  879:
    #####:  880:      return 0;
        -:  881:
        -:  882:    case remodel:
    #####:  883:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  884:
    #####:  885:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  886:	{
    #####:  887:	  return -1;
        -:  888:	}
        -:  889:
    #####:  890:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  891:
        -:  892:      //discard card from hand
    #####:  893:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  894:
        -:  895:      //discard trashed card
    #####:  896:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  897:	{
    #####:  898:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  899:	    {
    #####:  900:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  901:	      break;
        -:  902:	    }
        -:  903:	}
        -:  904:
        -:  905:
    #####:  906:      return 0;
        -:  907:
        -:  908:    case smithy:
        4:  909:      smithyEffect(currentPlayer, handPos, state);
call    0 returned 100%
        4:  910:      return 0;
        -:  911:
        -:  912:    case village:
        8:  913:      villageEffect(currentPlayer, handPos, state);
call    0 returned 100%
        8:  914:      return 0;
        -:  915:
        -:  916:    case baron:
    #####:  917:      state->numBuys++;//Increase buys by 1!
    #####:  918:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  919:	int p = 0;//Iterator for hand!
    #####:  920:	int card_not_discarded = 1;//Flag for discard set!
    #####:  921:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  922:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  923:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  924:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  925:	    state->discardCount[currentPlayer]++;
    #####:  926:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  927:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  928:	    }
    #####:  929:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  930:	    state->handCount[currentPlayer]--;
    #####:  931:	    card_not_discarded = 0;//Exit the loop
        -:  932:	  }
    #####:  933:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  934:	    if(DEBUG) {
        -:  935:	      printf("No estate cards in your hand, invalid choice\n");
        -:  936:	      printf("Must gain an estate if there are any\n");
        -:  937:	    }
    #####:  938:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  940:	      state->supplyCount[estate]--;//Decrement estates
    #####:  941:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  942:		isGameOver(state);
call    0 never executed
        -:  943:	      }
        -:  944:	    }
    #####:  945:	    card_not_discarded = 0;//Exit the loop
        -:  946:	  }
        -:  947:
        -:  948:	  else{
    #####:  949:	    p++;//Next card
        -:  950:	  }
        -:  951:	}
        -:  952:      }
        -:  953:
        -:  954:      else{
    #####:  955:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  956:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  957:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  958:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  959:	    isGameOver(state);
call    0 never executed
        -:  960:	  }
        -:  961:	}
        -:  962:      }
        -:  963:
        -:  964:
    #####:  965:      return 0;
        -:  966:
        -:  967:    case great_hall:
        -:  968:      //+1 Card
    #####:  969:      drawCard(currentPlayer, state);
call    0 never executed
        -:  970:
        -:  971:      //+1 Actions
    #####:  972:      state->numActions++;
        -:  973:
        -:  974:      //discard card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  976:      return 0;
        -:  977:
        -:  978:    case minion:
        -:  979:      //+1 action
    #####:  980:      state->numActions++;
        -:  981:
        -:  982:      //discard card from hand
    #####:  983:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  984:
    #####:  985:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  986:	{
    #####:  987:	  state->coins = state->coins + 2;
        -:  988:	}
        -:  989:
    #####:  990:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  991:	{
        -:  992:	  //discard hand
    #####:  993:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  994:	    {
    #####:  995:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:	    }
        -:  997:
        -:  998:	  //draw 4
    #####:  999:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:	    {
    #####: 1001:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1002:	    }
        -: 1003:
        -: 1004:	  //other players discard hand and redraw if hand size > 4
    #####: 1005:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1008:		{
    #####: 1009:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1010:		    {
        -: 1011:		      //discard hand
    #####: 1012:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1013:			{
    #####: 1014:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1015:			}
        -: 1016:
        -: 1017:		      //draw 4
    #####: 1018:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1019:			{
    #####: 1020:			  drawCard(i, state);
call    0 never executed
        -: 1021:			}
        -: 1022:		    }
        -: 1023:		}
        -: 1024:	    }
        -: 1025:
        -: 1026:	}
    #####: 1027:      return 0;
        -: 1028:
        -: 1029:    case steward:
    #####: 1030:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1031:	{
        -: 1032:	  //+2 cards
    #####: 1033:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1034:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1035:	}
    #####: 1036:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1037:	{
        -: 1038:	  //+2 coins
    #####: 1039:	  state->coins = state->coins + 2;
        -: 1040:	}
        -: 1041:      else
        -: 1042:	{
        -: 1043:	  //trash 2 cards in hand
    #####: 1044:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1046:	}
        -: 1047:
        -: 1048:      //discard card from hand
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:    case tribute:
    #####: 1053:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1054:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1055:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:	  state->deckCount[nextPlayer]--;
        -: 1057:	}
    #####: 1058:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1059:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1060:	  state->discardCount[nextPlayer]--;
        -: 1061:	}
        -: 1062:	else{
        -: 1063:	  //No Card to Reveal
        -: 1064:	  if (DEBUG){
        -: 1065:	    printf("No cards to reveal\n");
        -: 1066:	  }
        -: 1067:	}
        -: 1068:      }
        -: 1069:
        -: 1070:      else{
    #####: 1071:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1072:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1073:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1074:	    state->deckCount[nextPlayer]++;
    #####: 1075:	    state->discard[nextPlayer][i] = -1;
    #####: 1076:	    state->discardCount[nextPlayer]--;
        -: 1077:	  }
        -: 1078:
    #####: 1079:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1080:	}
    #####: 1081:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
    #####: 1084:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:	state->deckCount[nextPlayer]--;
        -: 1087:      }
        -: 1088:
    #####: 1089:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1090:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1091:	state->playedCardCount++;
    #####: 1092:	tributeRevealedCards[1] = -1;
        -: 1093:      }
        -: 1094:
    #####: 1095:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1096:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1097:	  state->coins += 2;
        -: 1098:	}
        -: 1099:
    #####: 1100:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:	}
        -: 1104:	else{//Action Card
    #####: 1105:	  state->numActions = state->numActions + 2;
        -: 1106:	}
        -: 1107:      }
        -: 1108:
    #####: 1109:      return 0;
        -: 1110:
        -: 1111:    case ambassador:
    #####: 1112:      j = 0;		//used to check if player has enough cards to discard
        -: 1113:
    #####: 1114:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1115:	{
    #####: 1116:	  return -1;
        -: 1117:	}
        -: 1118:
    #####: 1119:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
    #####: 1121:	  return -1;
        -: 1122:	}
        -: 1123:
    #####: 1124:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1127:	    {
    #####: 1128:	      j++;
        -: 1129:	    }
        -: 1130:	}
    #####: 1131:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  return -1;
        -: 1134:	}
        -: 1135:
        -: 1136:      if (DEBUG)
        -: 1137:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1138:
        -: 1139:      //increase supply count for choosen card by amount being discarded
    #####: 1140:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1141:
        -: 1142:      //each other player gains a copy of revealed card
    #####: 1143:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1144:	{
    #####: 1145:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1146:	    {
    #####: 1147:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1148:	    }
        -: 1149:	}
        -: 1150:
        -: 1151:      //discard played card from hand
    #####: 1152:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1153:
        -: 1154:      //trash copies of cards returned to supply
    #####: 1155:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1156:	{
    #####: 1157:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1158:	    {
    #####: 1159:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1160:		{
    #####: 1161:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1162:		  break;
        -: 1163:		}
        -: 1164:	    }
        -: 1165:	}
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:    case cutpurse:
    #####: 1170:      cutpurseEffect(currentPlayer, handPos, state);
call    0 never executed
    #####: 1171:      return 0;
        -: 1172:
        -: 1173:
        -: 1174:    case embargo:
        -: 1175:      //+2 Coins
    #####: 1176:      state->coins = state->coins + 2;
        -: 1177:
        -: 1178:      //see if selected pile is in play
    #####: 1179:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1180:	{
    #####: 1181:	  return -1;
        -: 1182:	}
        -: 1183:
        -: 1184:      //add embargo token to selected supply pile
    #####: 1185:      state->embargoTokens[choice1]++;
        -: 1186:
        -: 1187:      //trash card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1189:      return 0;
        -: 1190:
        -: 1191:    case outpost:
        -: 1192:      //set outpost flag
    #####: 1193:      state->outpostPlayed++;
        -: 1194:
        -: 1195:      //discard card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1197:      return 0;
        -: 1198:
        -: 1199:    case salvager:
        -: 1200:      //+1 buy
    #####: 1201:      state->numBuys++;
        -: 1202:
    #####: 1203:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
        -: 1205:	  //gain coins equal to trashed card
    #####: 1206:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1207:	  //trash card
    #####: 1208:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1209:	}
        -: 1210:
        -: 1211:      //discard card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1213:      return 0;
        -: 1214:
        -: 1215:    case sea_hag:
    #####: 1216:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1217:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1218:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1219:	  state->discardCount[i]++;
    #####: 1220:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1221:	}
        -: 1222:      }
    #####: 1223:      return 0;
        -: 1224:
        -: 1225:    case treasure_map:
    #####: 1226:      return treasure_mapEffect(currentPlayer, handPos, state);
call    0 never executed
        -: 1227:    }
    #####: 1228:  }
        -: 1229:
function discardCard called 16 returned 100% blocks executed 78%
       16: 1230:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1231:{
        -: 1232:
        -: 1233:  //if card is not trashed, added to Played pile
       16: 1234:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1235:    {
        -: 1236:      //add card to played pile
       16: 1237:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       16: 1238:      state->playedCardCount++;
        -: 1239:    }
        -: 1240:
        -: 1241:  //set played card to -1
       16: 1242:  state->hand[currentPlayer][handPos] = -1;
        -: 1243:
        -: 1244:  //remove card from player's hand
       16: 1245:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1246:    {
        -: 1247:      //reduce number of cards in hand
    #####: 1248:      state->handCount[currentPlayer]--;
        -: 1249:    }
       16: 1250:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1251:    {
        -: 1252:      //reduce number of cards in hand
    #####: 1253:      state->handCount[currentPlayer]--;
        -: 1254:    }
        -: 1255:  else
        -: 1256:    {
        -: 1257:      //replace discarded card with last card in hand
       16: 1258:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1259:      //set last card to -1
       16: 1260:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1261:      //reduce number of cards in hand
       16: 1262:      state->handCount[currentPlayer]--;
        -: 1263:    }
        -: 1264:
       16: 1265:  return 0;
        -: 1266:}
        -: 1267:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1268:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1269:{
        -: 1270:  //Note: supplyPos is enum of choosen card
        -: 1271:
        -: 1272:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1273:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1274:    {
    #####: 1275:      return -1;
        -: 1276:    }
        -: 1277:
        -: 1278:  //added card for [whoseTurn] current player:
        -: 1279:  // toFlag = 0 : add to discard
        -: 1280:  // toFlag = 1 : add to deck
        -: 1281:  // toFlag = 2 : add to hand
        -: 1282:
    #####: 1283:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1284:    {
    #####: 1285:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1286:      state->deckCount[player]++;
        -: 1287:    }
    #####: 1288:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1289:    {
    #####: 1290:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1291:      state->handCount[player]++;
        -: 1292:    }
        -: 1293:  else
        -: 1294:    {
    #####: 1295:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1296:      state->discardCount[player]++;
        -: 1297:    }
        -: 1298:
        -: 1299:  //decrease number in supply pile
    #####: 1300:  state->supplyCount[supplyPos]--;
        -: 1301:
    #####: 1302:  return 0;
        -: 1303:}
        -: 1304:
function updateCoins called 16 returned 100% blocks executed 82%
       16: 1305:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1306:{
        -: 1307:  int i;
        -: 1308:
        -: 1309:  //reset coin count
       16: 1310:  state->coins = 0;
        -: 1311:
        -: 1312:  //add coins for each Treasure card in player's hand
       76: 1313:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
        -: 1314:    {
       60: 1315:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1316:	{
       48: 1317:	  state->coins += 1;
        -: 1318:	}
       12: 1319:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1320:	{
    #####: 1321:	  state->coins += 2;
        -: 1322:	}
       12: 1323:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1324:	{
    #####: 1325:	  state->coins += 3;
        -: 1326:	}
        -: 1327:    }
        -: 1328:
        -: 1329:  //add bonus
       16: 1330:  state->coins += bonus;
        -: 1331:
       16: 1332:  return 0;
        -: 1333:}
        -: 1334:
        -: 1335:
        -: 1336:
        -: 1337://end of dominion.c
